PythonAlone

05. 함수
' 프로그래밍을 어떻게 더 쉽게 만들 것인가?'

: 함수 만드는 방법을 배운다.
: 함수 사용 방법을 이해한다.
: 튜플은 무엇인지 배운 후 튜플을 활용하는 방법을 이해한다.

05-3 함수 고급

> 파이썬 함수를 조금 더 편리하게 사용할 수 있는 다양한 방법들
- 튜플 : 함수와 함께 많이 사용되는 리스트와 비슷한 자료형으로, 리스트와 다른 점은 한번 결정된 요소는 바꿀 수 없다.
- 람다 : 매개변수로 함수를 전달하기 위해 함수 구문을 작성하는 것이 번거롭고, 코드 공간 낭비라는 생각이 들 때, 함수를 간단하고 쉽게 선언하는 방법

# 튜플
: 튜플(tuple) : 한번 결정된 요소를 바꿀 수 없다는 점이다.
[  (데이터, 데이터, 데이터, ... )  ]

---------------------------------------------------------------------------
>>> tuple_test = (10, 20, 30)
>>> tuple_test
(10, 20, 30)
>>> tuple_test[0]
10
>>> tuple_test[1]
20
>>> tuple_test[2]
30
---------------------------------------------------------------------------
: 여기까지는 튜플과 리스트의 차이를 확연히 알 수 없다. 

---------------------------------------------------------------------------
>>> tuple_test[0] = 1
Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
    tuple_test[0] = 1
TypeError: 'tuple' object does not support item assignment
---------------------------------------------------------------------------
: 튜플에서 내부 요소를 변경하려 하니, 오류가 발생한다.

-> 그럼 굳이 튜플을 사용할 필요성이 떨어지는 것 아닌가? 라는 생각이 든다.

=====================================================================
# 요소를 하나만 가지는 튜플
[273]
(273) (X)
(273, ) (O)    : 요소를 하나만 가지는 튜플을 생성하고 싶으면 쉼표를 넣어 선언해야 한다.
=====================================================================

= 괄오 없는 튜플

> 리스트와 튜플의 특이한 사용
---------------------------------------------------------------------------
# 리스트와 튜플의 특이한 사용
[a, b] = [10, 20]
(c, d) = (10, 20)

# 출력합니다.
# 리스트와 튜플의 특이한 사용
[a, b] = [10, 20]
(c, d) = (10, 20)

# 출력합니다.
print("a: ", a)
print("b: ", b)
print("c: ", c)
print("d: ", d)

a:  10
b:  20
c:  10
d:  20
---------------------------------------------------------------------------
: 튜플은 괄호를 생략해도 튜플로 인식할 수 있는 경우는 괄호를 생략해도 된다.

> 괄호가 없는 튜플
---------------------------------------------------------------------------
# 괄호가 없는 튜플
tuple_test = 10, 20, 30, 40
print("# 괄호가 없는 튜플의 값과 자료형 출력")
print("tuple_test:", tuple_test)
print("type(tuple_test):", type(tuple_test))
print()

# 괄호가 없는 튜플 활용
a, b, c = 10, 20, 30
print("# 괄호가 없는 튜플을 활용한 할당")
print("a:", a)
print("b:", b)
print("c:", c)

# 괄호가 없는 튜플의 값과 자료형 출력
tuple_test: (10, 20, 30, 40)
type(tuple_test): <class 'tuple'>

# 괄호가 없는 튜플을 활용한 할당
a: 10
b: 20
c: 30
---------------------------------------------------------------------------

> 변수의 값을 교환하는 튜플
---------------------------------------------------------------------------
a, b = 10, 20

print("# 교환 전 값")
print("a:", a)
print("b:", b)
print()

# 값을 교환한다.
a, b = b, a

print("# 교환 후 값")
print("a:", a)
print("b:", b)
print()

# 교환 전 값
a: 10
b: 20

# 교환 후 값
a: 20
b: 10

---------------------------------------------------------------------------
: 편리하게 교환할 수 있다.

= 튜플과 함수
: 튜플은 함수의 리턴에 많이 사용한다

> 여러 개의 값 리턴하기
---------------------------------------------------------------------------
# 함수를 선언한다.
def test():
    return (10, 20)

# 여러 개의 값을 리턴받는다.
a, b = test()

# 출력한다.
print("a:", a)
print("b:", b)

a: 10
b: 20
---------------------------------------------------------------------------
: 튜플에서도 +, * 연산자를 사용할 수 있다.

=====================================================================
# 튜플을 리턴하는 함수의 예

>>> a, b = 97, 40
>>> a // b    # 몫
2
>>> a % b    # 나머지 
17

>>> a, b = 97, 40
>>> divmod(a, b)
(2, 17)
>>> x, y = divmod(a, b)
>>> x
2
>>> y
17
=====================================================================

# 람다
: 요즘 프로그래밍 언어에서는 함수라는 '기능'을 매개변수로 전달하는 코드를 많이 사용한다.
: 람다(lambda) 사용!!!

= 함수의 매개변수로 함수 전달하기

> 함수의 매개 변수로 함수 전달하기
---------------------------------------------------------------------------
# 매개변수로 받은 함수를 10번 호출하는 함수
def call_10_times(func):
    for i in range(10):
        func()

# 간단한 출력하는 함수
def print_hello():
    print("안녕하세요")

# 조합하기
call_10_times(print_hello)

안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
---------------------------------------------------------------------------
: "안녕하세요"라는 말을 여러 번 반복한다.

= filter()함수와 map()함수
: 표준함수 : map()함수와 filter()함수

[  map(함수, 리스트)  ]
: 리스트의 요소를 함수에 넣고 리턴된 값으로 새로운 리스트를 구성해 주는 함수

[  filter(함수, 리스트)  ]
: 리스트의 요소를 함수에 넣고 리턴된 값이 True인 것으로, 새로운 리스트를 구성해주는 함수

> map()함수와 filter()함수
---------------------------------------------------------------------------
# 함수를 선언한다.
def power(item):
    return item * item
def under_3(item):
    return item < 3

# 변수를 선언한다.
list_input_a = [1, 2, 3, 4, 5]

# map()함수를 사용한다.
output_a = map(power, list_input_a)
print("# map() 함수의 실행결과")
print("map(power, list_input_a:", output_a)
print("map(power, list_input_a:", list(output_a))
print()

# filter()함수를 사용한다.
output_b = filter(under_3, list_input_a)
print("# filter() 함수의 실행결과")
print("filter(under_3, list_input_a):", output_b)
print("filter(under_3, list_unput_a):", list(output_b))

# map() 함수의 실행결과
map(power, list_input_a: <map object at 0x03DB8FE8>
map(power, list_input_a: [1, 4, 9, 16, 25]

# filter() 함수의 실행결과
filter(under_3, list_input_a): <filter object at 0x03DB8F58>   # 재너레이터(generator)
filter(under_3, list_unput_a): [1, 2]
---------------------------------------------------------------------------

= 람다의 개념
: 함수 구문을 작성하는 과정도 번거롭고, 코드 공간 낭비라는 생각이 들 수 있어서 하는 선택

[  lambda 매개변수: 리턴값  ]

> 람다
---------------------------------------------------------------------------
# 함수를 선언한다.
power = lambda x: x * x
under_3 = lambda x: x < 3

# 변수를 선언한다.
list_input_a = [1, 2, 3, 4, 5]

# map()함수를 사용한다.
output_a = map(power, list_input_a)
print("# map() 함수의 실행결과")
print("map(power, list_input_a:", output_a)
print("map(power, list_input_a:", list(output_a))
print()

# filter()함수를 사용한다.
output_b = filter(under_3, list_input_a)
print("# filter() 함수의 실행결과")
print("filter(under_3, list_input_a):", output_b)
print("filter(under_3, list_unput_a):", list(output_b))

# map() 함수의 실행결과
map(power, list_input_a: <map object at 0x0368AE20>
map(power, list_input_a: [1, 4, 9, 16, 25]

# filter() 함수의 실행결과
filter(under_3, list_input_a): <filter object at 0x037D8FE8>
filter(under_3, list_unput_a): [1, 2]
---------------------------------------------------------------------------

> 인라인 람다
---------------------------------------------------------------------------
# 변수를 선언한다.
list_input_a = [1, 2, 3, 4, 5]

# map()함수를 사용한다.
output_a = map(lambda x: x * x, list_input_a)
print("# map() 함수의 실행결과")
print("map(power, list_input_a:", output_a)
print("map(power, list_input_a:", list(output_a))
print()

# filter()함수를 사용한다.
output_b = filter(lambda x: x < 3, list_input_a)
print("# filter() 함수의 실행결과")
print("filter(under_3, list_input_a):", output_b)
print("filter(under_3, list_unput_a):", list(output_b))

# map() 함수의 실행결과
map(power, list_input_a: <map object at 0x036CAE20>
map(power, list_input_a: [1, 4, 9, 16, 25]

# filter() 함수의 실행결과
filter(under_3, list_input_a): <filter object at 0x03818FE8>
filter(under_3, list_unput_a): [1, 2]
---------------------------------------------------------------------------
: 더욱 깔끔하게 정리가 된다.

[  lambda x, y: x * y  ]

# 파일 처리
: 파일과 관련된 처리 함수는 표준 함수가 기본으로 제공된다.
- 텍스트 파일 / 바이너리 파일

= 파일 열고 닫기
: open()함수
[  파일 객체 = open(문자열: 파일 경로, 문자열: 읽기 모드)  ]

-> 첫 번째 매개변수에 파일 경로(path)를 입력하고, 두 번째 매개변수에 모드(mode)를 입력한다.

=====================================================================
모드  설명
w    write모드(새로 쓰기 모드)
a    append모드(뒤에 이어서 쓰기 모드)
r    read모드(읽기 모드)
=====================================================================

: close()함수
[  파일 객체.close()  ]

> 파일 열고 닫기
---------------------------------------------------------------------------
# 파일을 연다
file = open("basic.txt", "w")

# 파일에 텍스트를 쓴다.
file.write("Hello Python Programming...!")

# 파일을 닫는다.
file.close()

같은 파일 안에 'basic.txt'라는 텍스트 파일이 생성된다.
---------------------------------------------------------------------------
: open()함수를 사용하면 close()함수도 필수적으로 사용해야 한다.

= with 키워드
: 조건문과 반복문을 사용하는 과정에서 파일을 열고 닫지 않는 실수가 발생하기도 한다.

[  with open(문자열: 파일 경로, 문자열: 모드) as 파일 객체:
   문장												]

---------------------------------------------------------------------------
# 파일을 연다
with open("basic.txt", "w") as file:
	# 파일에 텍스트를 쓴다.
	file.write("Hello Python Programming...!")
---------------------------------------------------------------------------
: 파일을 열고 닫는 실수를 줄일 수 있다.

=====================================================================
# 스트림
: 프로그램이 외부 파일, 외부 네트워크 등과 통신할 때는 데이터가 흐르는 길을 만들어야 한다.
- open()함수 : 프로그램에서 파일로 흐르는 길을 만드는 것
- close()함수 : 프로그램에서 파일로 흐르는 길을 닫는 것
=====================================================================

= 텍스트 읽기
: read()함수 사용
[  파일 객체.read()  ]
: 내부에 있는 데이터를 모두 읽어 출력한다.

> read()함수로 텍스트 읽기
---------------------------------------------------------------------------
# 파일을 연다.
with open("basic.txt", "r") as file:
    # 파일을 읽고 출력한다.
    contents = file.read()
print(contents)

Hello Python Programming...!
---------------------------------------------------------------------------

= 텍스트 한 줄씩 읽기
: 텍스트를 사용해 데이터를 구조적으로 표현하는 방법 : CSV, XML, JSON 등

- CSV(Comma Separated Values) : 쉼표로 구분된 값들
: 헤더를 넣어 각 데이터가 무엇을 나타내는지 설명한다.

> 랜덤하게 1000명의 키와 몸무게 만들기
---------------------------------------------------------------------------
# 랜덤한 숫자를 만들기 위해 가져온다.
import random
# 간단한 한글 리스트를 만든다.
hanguls = list("가나다라마바사아자차카타파하")
# 파일을 쓰기 모드로 연다.
with open("info.txt", "w") as file:
    for i in range(1000):
        # 랜덤한 값으로 변수를 생성한다.
        name = random.choice(hanguls) + random.choice(hanguls)
        weight = random.randrange(40, 100)
        height = random.randrange(140, 200)
        # 텍스트를 쓴다.
        file.write("{}, {}, {}\n".format(name, weight, height))
		
info.txt에 생성된다.		
---------------------------------------------------------------------------

[  for 한 줄을 나타내는 문자열 in 파일 객체:
   처리 									]
   
> 반복문으로 파일 한 줄씩 읽기
---------------------------------------------------------------------------
with open("info.txt", "r") as file:
    for line in file:
        # 변수를 선언한다.
        (name, weight, height) = line.strip().split(", ")

        # 데이터가 문제없는지 확인한다: 문제가 있으면 지나감
        if (not name) or (not weight) or (not height):
            continue
        # 결과를 계산한다.
        BMI = int(weight) / ((int(height) / 100) **2)
        result = ""
        if 30 <= BMI:
            result = "비만"
        elif 25 <= BMI:
            result = "과체중"
        elif 18.5 <= BMI:
            result = "정상 체중"
        else:
            result = "저체중"

        # 출력한다.
        print('\n'.join([
            "이름: {}",
            "몸무게: {}",
            "키: {}",
            "BMI: {}",
            "결과: {}"
        ]).format(name, weight, height, BMI, result))
        print()
---------------------------------------------------------------------------


=====================================================================
# 3가지 키워드로 정리하는 핵심 포인트
- 튜플 : 리스트와 비슷하지만, 요소를 수정할 수 없는 파이썬의 특별한 문법으로, 괄호를 생략하여
		다양하게 활용할 수 있다.
- 람다 : 함수를 짧게 쓸 수 있는 파이썬의 특별한 문법
- with 구문 : 블록을 벗어날 때 close()함수를 자동으로 호출해 주는 구문
=====================================================================

