PythonAlone

05. 함수
' 프로그래밍을 어떻게 더 쉽게 만들 것인가?'

: 함수 만드는 방법을 배운다.
: 함수 사용 방법을 이해한다.
: 튜플은 무엇인지 배운 후 튜플을 활용하는 방법을 이해한다.

05-1 함수 만들기
: 식별자 뒤에 괄호가 붙어 있으면 해당 식별자는 '함수'라 부른다.
> print(), len(), str(), int() ...

- 함수를 사용한다 = 함수를 호출한다.
- 함수를 호출할 때는 괄호 내부에 여러 가지 자료를 넣게 된다. = 이러한 자료 "매개변수"
- 함수를 호출해서 최종적으로 나오는 결과 = "리턴값"

>>>len("안녕하세요")
5    # 리턴값

# 함수의 기본
: 함수 : '코드의 집합'
[  def 함수 이름():
	   문장		   ]

> 기본적인 함수
---------------------------------------------------------------------------
def print_3_times():
    print("안녕하세요")
    print("안녕하세요")
    print("안녕하세요")

print_3_times()

안녕하세요
안녕하세요
안녕하세요
---------------------------------------------------------------------------

# 함수에 매개변수 만들기
[  def 함수 이름(매개변수, 매개변수, ...):
	   문장						    ]

> 매개변수의 기본
---------------------------------------------------------------------------
def print_n_times(value, n):
    for i in range(n):
        print(value)

print_n_times("안녕하세요", 5)

안녕하세요
안녕하세요
안녕하세요
안녕하세요
안녕하세요
---------------------------------------------------------------------------
: value와 n이라는 식별자 입력
print_n_times("안녕하세요", 5) -> value : "안녕하세요", n : 5 가 들어가게 된다.

= 매개변수와 관련된 TypeError (예외처리)

> 매개변수를 넣지 않은 경우
---------------------------------------------------------------------------
def print_n_times(value, n):    # 매개변수를 2개 지정했는데
	for i in range(n):
print(value)

# 함수를 호출한다.
print_n_times("안녕하세요")    # 하나만 넣는다.

Traceback (most recent call last):
  File "C:\Users\이윤섭\Desktop\python practice\5단원\5-1\param_basic.py", line 5, in <module>
    print_n_times("안녕하세요")
TypeError: print_n_times() missing 1 required positional argument: 'n'
---------------------------------------------------------------------------

> 매개변수를 더 많이 넣는 경우
---------------------------------------------------------------------------
def print_n_times(value, n):
    for i in range(n):
        print(value)

print_n_times("안녕하세요", 10, 20)

Traceback (most recent call last):
  File "C:\Users\이윤섭\Desktop\python practice\5단원\5-1\param_basic.py", line 5, in <module>
    print_n_times("안녕하세요", 10, 20)
TypeError: print_n_times() takes 2 positional arguments but 3 were given
---------------------------------------------------------------------------
: '2개의 매개변수가 필요한데 3개가 들어왔다.'라는 의미이다.

# 가변 매개변수
: print()함수와 같이 매개변수를 원하는 만큼 받을 수 있는 함수

[  def 함수 이름(매개변수, 매개변수, 매개변수, ..., *가변 매개변수):
	문장													]
	
- 가변 매개변수 뒤에는 일반 매개변수가 올 수 없다.
: 일반적으로 매개변수가 많아지면 복잡해질 수 있을 가능성이 올라가기 때문에 가장 뒤에 작성한다.
- 가변 매개변수는 하나만 사용할 수 있다.

> 가변 매개변수 함수
---------------------------------------------------------------------------
def print_n_times(n, *values):
    # n번 반복한다.
    for i in range(n):
        # values는 리스트처럼 활용한다.
        for value in values:
            print(value)
        # 단순한 줄바꿈
        print()

# 함수를 호출한다.
print_n_times(3, "안녕하세요", "즐거운", "파이썬 프로그래밍")

안녕하세요
즐거운
파이썬 프로그래밍

안녕하세요
즐거운
파이썬 프로그래밍

안녕하세요
즐거운
파이썬 프로그래밍
---------------------------------------------------------------------------

# 기본 매개변수
[  print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)  ]
: 가장 앞에 있는 value가 가변 매개변수이다. 

- 기본 매개변수 뒤애는 일반 매개변수가 올 수 없다.

> 기본 매개변수
---------------------------------------------------------------------------
def print_n_times(value, n=2):
    # n번 반복한다.
    for i in range(n):
        print(value)

# 함수를 호출한다.
print_n_times("안녕하세요")

안녕하세요
안녕하세요
---------------------------------------------------------------------------

=====================================================================
# 기본 매개변수 뒤에 일반 매개변수를 오지 못하게 막은 이유
: 내부적으로 기본 매개변수 뒤에 일반 매개변수가 오지 못하도록 막음으로써 매개변수 할당 위치를
  단번에 파악할 수 있다.
=====================================================================

# 키워드 매개변수
: 가변 매개변수와 기본 매개변수를 한꺼번에 사용할 수 있는지??

= 기본 매개변수가 가변 매개변수보다 앞에 올 때
: 기본 매개변수가 가변 매개변수 앞으로 오면 기본 매개변수의 의미가 사라진다.

---------------------------------------------------------------------------
def print_n_times(n=2, *values):
    # n번 반복한다.
    for i in range(n):
        # values는 리스트처럼 활용한다.
        for value in values:
            print(value)
        # 단순한 줄바꿈
        print()
        
# 함수를 호출한다.
print_n_times("안녕하세요", "즐거운", "파이썬 프로그래밍")

Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/5단원/5-1/default_param02.py", line 11, in <module>
    print_n_times("안녕하세요", "즐거운", "파이썬 프로그래밍")
  File "C:/Users/이윤섭/Desktop/python practice/5단원/5-1/default_param02.py", line 3, in print_n_times
    for i in range(n):
TypeError: 'str' object cannot be interpreted as an integer
---------------------------------------------------------------------------
: range()함수에는 숫자만 들어갈 수 있기에 오류가 발생한다.

= 가변 매개변수가 기본 매개변수보다 앞에 올 때
---------------------------------------------------------------------------
def print_n_times(*values, n=2):
    # n번 반복한다.
    for i in range(n):
        # values는 리스트처럼 활용한다.
        for value in values:
            print(value)
        # 단순한 줄바꿈
        print()
        
# 함수를 호출한다.
print_n_times("안녕하세요", "즐거운", "파이썬 프로그래밍", 3)

안녕하세요
즐거운
파이썬 프로그래밍
3

안녕하세요
즐거운
파이썬 프로그래밍
3
---------------------------------------------------------------------------

= 키워드 매개변수
: 가변 매개변수와 기본 매개변수를 한꺼번에 사용하는 방법

[  print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)  ]
: value를 여러 개 입력할 수 있는 가변 매개변수를 앞에 두고, 뒤에 기본 매개변수를 두는 방법

> infinite_loop
---------------------------------------------------------------------------
# while 반복문을 사용한다.
while True:
    # "."을 출력한다.
    # 기본적으로 end가 "\n"이라 줄바꿈이 일어나는데,
    # 빈 문자열 ""로 바꿔서 줄바꿈이 일어나지 않게 한다.
    print(".", end="")    # 키워드 매개변

...........................................................................
...........................................................................
...........................................................................
...........................................................................
................................................................
---------------------------------------------------------------------------

> 키워드 매개변수
---------------------------------------------------------------------------
def print_n_times(*values, n=2):
    # n번 반복한다.
    for i in range(n):
        # values는 리스트처럼 활용한다.
        for value in values:
            print(value)
        # 단순한 줄바꿈
        print()

# 함수를 호출한다.
print_n_times("안녕하세요", "즐거운", "파이썬 프로그래밍", n=3)

안녕하세요
즐거운
파이썬 프로그래밍

안녕하세요
즐거운
파이썬 프로그래밍

안녕하세요
즐거운
파이썬 프로그래밍
---------------------------------------------------------------------------
: 키워드 매개변수 : 매개변수 이름을 지정해서 입력하는 매개변수

= 기본 매개변수 중에서 필요한 값만 입력하기

> 여러 함수 호출 형태
---------------------------------------------------------------------------
def test(a, b=10, c=100):
    print(a + b + c)

# 1) 기본 형태
test(10, 20, 30)
# 2) 키워드 매개벼누로 모든 매개변수를 지정한 형태
test(a=10, b=100, c=200)
# 3) 키워드 매개변수로 모든 매개변수를 마구잡이로 지정한 형태
test(c=10, a=100, b=200)
# 4) 키워드 매개변수로 일부 매개변수만 지정한 형태
test(10, c=200)

60
310
310
220
---------------------------------------------------------------------------

=====================================================================
# 파이썬 라이브러리 문서
: 라이브러리의 문서를 틈틈이 읽어보자!!!
=====================================================================

# 리턴
: input()함수 : 리턴값(Return value)

=====================================================================
# input() 함수의 리턴값을 변수에 저장한다.
value = input(">")

# 출력한다.
print(value)
=====================================================================

= 자료 없이 리턴하기
: 함수 return 키워드 : 함수를 실행했던 위치로 돌아가라는 뜻

> 자료 없이 리턴하기
---------------------------------------------------------------------------
# 함수를 정의한다.
def return_test():
    print("A 위치입니다.")
    return                  # 리턴한다.
    print("B 위치합니다.")

# 함수를 호출한다.
return_test()

A 위치입니다.
---------------------------------------------------------------------------
: return 키워드는 함수를 실행했던 위치로 돌아가라는 의미로 함수를 여기서 끝내라는 의미를 가지고 있다.
(return()함수를 만나는 즉시 함수를 종료해버린다.)

= 자료와 함께 리턴하기
: 리턴 뒤에 자료를 입력하면 자료를 가지고 리턴한다.

> 자료와 함께 리턴하기
---------------------------------------------------------------------------
# 함수를 정의한다.
def return_test():
    return 100

# 함수를 호출한다.
value = return_test()
print(value)

100
---------------------------------------------------------------------------

= 아무것도 리턴하지 않기

> 아무것도 리턴하지 않았을 때의 리턴값
---------------------------------------------------------------------------
# 함수를 정의한다.
def return_test():
    return

# 함수를 호출한다.
value = return_test()
print(value)

None
---------------------------------------------------------------------------

# 기본적인 함수의 활용
=====================================================================
def 함수(매개변수):
	변수 = 초깃값
	# 여러 가지 처리
	# 여러 가지 처리
	# 여러 가지 처리
	return 변수
=====================================================================

> 범위 내부의 정수를 모두 더하는 함수
---------------------------------------------------------------------------
# 함수를 선언한다.
def sum_all(start, end):
    # 변수를 선언한다.
    output = 0
    # 반복문을 돌려 숫자를 더한다.
    for i in range(start, end + 1):
        output += i
    # 리턴한다.
    return output

# 함수를 호출한다.
print("0 to 100:", sum_all(0, 100))
print("0 to 1000:", sum_all(0, 1000))
print("50 to 100:", sum_all(50, 100))
print("500 to 1000:", sum_all(500, 1000))

0 to 100: 5050
0 to 1000: 500500
50 to 100: 3825
500 to 1000: 375750
---------------------------------------------------------------------------

> 기본 매개변수와 키워드 매개변수를 활용해 범위의 정수를 더하는 함수
---------------------------------------------------------------------------
# 함수를 선언한다.
def sum_all(start = 0, end = 100, step = 1):
    # 변수를 선언한다.
    output = 0
    # 반복문을 돌려 숫자를 더한다.
    for i in range(start, end + 1, step):
        output += i
    # 리턴한다.
    return output

# 함수를 호출한다.
print("A.", sum_all(0, 100, 10))
print("B.", sum_all(end = 100))
print("C.", sum_all(end = 100, step = 2))

A. 550
B. 5050
C. 2550
---------------------------------------------------------------------------

=====================================================================
# 5가지 키워드로 정리하는 핵심 포인트
- 호출 : 함수를 실행하는 행위
- 매개변수 : 함수의 괄호 내부에 넣는 것을 의미
- 리턴값 : 함수의 최종적인 결과를 의미
- 가변 매개변수 함수 : 매개변수를 원하는 만큼 받을 수 있는 함수
- 기본 매개변수 함수 : 매개변수에 아무것도 넣지 않아도 들어가는 값
=====================================================================

