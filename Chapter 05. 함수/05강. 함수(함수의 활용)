PythonAlone

05. 함수
' 프로그래밍을 어떻게 더 쉽게 만들 것인가?'

: 함수 만드는 방법을 배운다.
: 함수 사용 방법을 이해한다.
: 튜플은 무엇인지 배운 후 튜플을 활용하는 방법을 이해한다.

05-2 함수의 활용

> 함수를 활용하는 주요 패턴

# 재귀 함수
[  n! = n * (n - 1) * (n - 2) * ... * 1

- 반복문으로 팩토리얼 구하기
- 재귀 함수로 팩토리얼 구하기

= 반복문으로 팩토리얼 구하기
: start부터 end까지 더하는 함수를 곱하는 함수로 바꾸면 된다.

> 반복문으로 팩토리얼 구하기
---------------------------------------------------------------------------
# 함수를 선언한다.
def factorial(n):
    # 변수를 선언한다.
    output = 1
    # 반복문을 돌려 숫자를 변환한다.
    for i in range(1, n + 1):
        output *= i
    # 리턴한다.
    return output

# 함수를 호출한다.
print("1!:", factorial(1))
print("2!:", factorial(2))
print("3!:", factorial(3))
print("4!:", factorial(4))
print("5!:", factorial(5))

1!: 1
2!: 2
3!: 6
4!: 24
5!: 120
---------------------------------------------------------------------------

= 재귀 함수로 팩토리얼 구하기
: 재귀(recursion) : 자기 자신을 호출하는 것
[  n! = n * (n - 1) * ... * 1  ]

factorial(n) = n * factorial(n - 1) (n >= 1일 때)
factorial(0) = 1

> 재귀함수를 사용해 팩토리얼 구하기
---------------------------------------------------------------------------
# 함수를 선언한다.
def factorial(n):
    # n이 0이라면1을 리턴
    if n == 0:
        return 1
    # n이 0이 아니라면 n * (n - 1)!을 리턴
    else:
        return n * factorial(n - 1)

# 함수를 호출한다.
print("1!:", factorial(1))
print("2!:", factorial(2))
print("3!:", factorial(3))
print("4!:", factorial(4))
print("5!:", factorial(5))

1!: 1
2!: 2
3!: 6
4!: 24
5!: 120
---------------------------------------------------------------------------

# 재귀 함수의 문제
: 상황에 따라 기하급수적으로 많이 반복한다는 문제점이 있다.
(개발자들 사이에서 재귀함수를 절대 사용하지 말자는 말까지 있을 정도이다.)
-> 메모화(memorization)

: 피보나치 수열
- 1번째 수열 = 1
- 2번째 수열 = 1
- n번째 수열 = (n - 1)번째 수열 + (n - 2)번째 수열

> 재귀함수로 구현한 피보나치 수열(1)
---------------------------------------------------------------------------
# 함수를 선언한다.
def fibonacci(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# 함수를 호출한다.
print("fibonacci(1):", fibonacci(1))
print("fibonacci(2):", fibonacci(2))
print("fibonacci(3):", fibonacci(3))
print("fibonacci(4):", fibonacci(4))
print("fibonacci(5):", fibonacci(5))

fibonacci(1): 1
fibonacci(2): 1
fibonacci(3): 2
fibonacci(4): 3
fibonacci(5): 5
---------------------------------------------------------------------------
: 피보나치 수열이 점차 커지게 되면 연산 시간이 오래걸리게 된다!!!

> 재귀함수로 구현한 피보나치 수열(2)
---------------------------------------------------------------------------
# 변수를 선언한다.
counter = 0

# 함수를 선언한다.
def fibonacci(n):
    # 어떤 피보나치 수를 구하는지 출력한다.
    print("fibonacci({})를 구합니다.".format(n))
    global counter
    counter += 1
    # 피보나치 수를 구한다.
    if n == 1:
        return 1
    if n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# 함수를 호출한다.
fibonacci(10)
print("---")
print("fibonacci(10)을 계산에 활용된 덧셈 횟수는 {}번입니다.".format(counter))

fibonacci(10)를 구합니다.
fibonacci(9)를 구합니다.
fibonacci(8)를 구합니다.
fibonacci(7)를 구합니다.
fibonacci(6)를 구합니다.
fibonacci(5)를 구합니다.
fibonacci(4)를 구합니다.
fibonacci(3)를 구합니다.
fibonacci(2)를 구합니다.
fibonacci(1)를 구합니다.
...
fibonacci(1)를 구합니다.
fibonacci(4)를 구합니다.
fibonacci(3)를 구합니다.
fibonacci(2)를 구합니다.
fibonacci(1)를 구합니다.
fibonacci(2)를 구합니다.
---
fibonacci(10)을 계산에 활용된 덧셈 횟수는 109번입니다.
---------------------------------------------------------------------------
: 트리(tree)에 있는 각각의 지점을 노드(node), 노드 중에 가장 마지막 단계의 노드를 리프(leaf)라 부른다.

> 트리 내부에 있는 각각의 노드 값을 계산하려면 덧셈을 한 번씩해야한다.
> 노드가 한 번에 두 개씩 달린다.

= UnboundLocalError에 대한 처리 (예외처리)

> 재귀함수로 구현한 피보나치 수열(3)
---------------------------------------------------------------------------
# 변수를 선언한다.
counter = 0

# 함수를 선언한다.
def fibonacci(n):
    # 어떤 피보나치 수를 구하는지 출력한다.
    print("fibonacci({})를 구합니다.".format(n))
    counter += 1
    # 피보나치 수를 구한다.
    if n == 1:
        return 1
    if n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# 함수를 호출한다.
fibonacci(10)
print("---")
print("fibonacci(10)을 계산에 활용된 덧셈 횟수는 {}번입니다.".format(counter))

fibonacci(10)를 구합니다.
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/5단원/5-2/fibonacci_recursion03.py", line 18, in <module>
    fibonacci(10)
  File "C:/Users/이윤섭/Desktop/python practice/5단원/5-2/fibonacci_recursion03.py", line 8, in fibonacci
    counter += 1
UnboundLocalError: local variable 'counter' referenced before assignment
---------------------------------------------------------------------------
: 파이썬 함수 내부에서 함수 외부에 있는 변수를 참조하지 못한다.
> 참조(reference)

[  global 변수 이름  ]

: global 키워드 : 파이썬 언어에만 있는 특이한 구조

= 메모화
: 필요한 경우에 사용하면 코드가 매우 간결해지는 효과를 볼 수 있다.

> 메모화
---------------------------------------------------------------------------
# 메모 변수를 만든다.
dictionary = {
    1: 1,
    2: 2
    }

# 함수를 선언한다.
def fibonacci(n):
    if n in dictionary:
        # 메모가 되어 있으면 메모된 값을 리턴
        return dictionary[n]
    else:
        # 메모가 되어 있지 않으면 값을 구함
        output = fibonacci(n - 1) + fibonacci(n - 2)
        dictionary[n] = output
        return output

# 함수를 호출한다.
print("fibonacci(10):", fibonacci(10))
print("fibonacci(20):", fibonacci(20))
print("fibonacci(30):", fibonacci(30))
print("fibonacci(40):", fibonacci(40))
print("fibonacci(50):", fibonacci(50))

fibonacci(10): 89
fibonacci(20): 10946
fibonacci(30): 1346269
fibonacci(40): 165580141
fibonacci(50): 20365011074
---------------------------------------------------------------------------
: 메모(memorization) : 딕셔너리를 사용해서 한 번 계산한 값을 저장한다. 
> 딕셔너리 안에 값이 메모되어 있으면 처리를 수행하지 않고 곧바로 메모된 값을 돌려주면서 코드의 속도를 빠르게 만든다.

# 조기 리턴
: 비공식적 룰 : 변수는 반드시 앞쪽에 몰아서 선언 / 리턴은 반드시 뒤쪽에서 해야한다.

> 조기 리턴(1)
---------------------------------------------------------------------------
# 함수를 선언한다.
def fibonacci(n):
    if n in dictionary:
    # 메모되어 있으면 메모된 값을 리턴
        return dictionary[n]
    else:
        # 메모되어 있지 않으면 값을 구함
        output = fibonacci(n - 1) + fibonacci(n - 2)
        dictionary[n] = output
        return output
---------------------------------------------------------------------------

: 들여쓰기가 줄게 되어 코드를 쉽게 읽을 수 있게 된다.

> 조기 리턴(2)
---------------------------------------------------------------------------
# 함수를 선언한다.
def fibonacci(n):
    if n in dictionary:
    # 메모되어 있으면 메모된 값을 리턴
        return dictionary[n]
    # 메모되어 있지 않으면 값을 구함
    output = fibonacci(n - 1) + fibonacci(n - 2)
    dictionary[n] = output
    return output
---------------------------------------------------------------------------

1) 코드에 이름 붙이기
: '가독성'을 높이기 위해서 코드를 쉽게 만든다.

> 어떠한 설명도 없는 코드
---------------------------------------------------------------------------
radius = input("숫자 입력> ")
radius = float(number_input_a)

print(2 * 3.14 * radius)
print(2 * radius * radius)
---------------------------------------------------------------------------

> 주석이 있는 코드
---------------------------------------------------------------------------
# 숫자 입력을 받는다.
radius = input("숫자 입력> ")
radius = float(number_input_a)

# 원의 둘레와 넓이를 출력한다.
print(2 * 3.14 * radius)
print(2 * radius * radius)
---------------------------------------------------------------------------

=> '주석을 잘 활용하는 사람들은 프로그래밍을 잘하는 사람이다!'

> 함수를 활용한 코드
---------------------------------------------------------------------------
def number_input():
    output = input("숫자 입력> ")
    return float(output)
def get_circumference(radius):
    return 2 * 3.14 * radius
def get_circle_area(radius):
    return 3.14 * radius * radius

# 코드 반복
radius = number_input()
print(get_circumference(radius))
print(get_circle_area(radius))

숫자 입력> 10
62.800000000000004
314.0
---------------------------------------------------------------------------

=> 한 줄의 코드라도 의미를 내포하고 있을 수 있는 코드를 만드는 것이 좋다!!!

2) 코드 유지보수
: 함수를 활용하면 코드를 유지보수하는 과정에서 엄청난 이점을 얻을 수 있다.

> 3.14를 숫자로 입력한 상태
---------------------------------------------------------------------------
def get_circumference(radius):
	return 2 * 3.14 * radius
def get_circle_area(radius):
	return 3.14 * radius * radius
---------------------------------------------------------------------------

> 3.14를 PI라는 변수로 설정한 상태
---------------------------------------------------------------------------
PI = 3.14

def get_circumference(radius):
	return 2 * PI * radius
def get_circle_area(radius):
	return PI * radius * radius
---------------------------------------------------------------------------

=> 실수가 발생할 가능성이 매우 많이 줄어든다!!!

> 함수를 사용하지 않은 경우
---------------------------------------------------------------------------
# 출력한다.
print("<p>{}</p>".format("안녕하세요."))
print("<p>{}</p>".format("간단한 HTML 태그를 만드는 예입니다."))

<p>안녕하세요.</p>
<p>간단한 HTML 태그를 만드는 예입니다.</p>
---------------------------------------------------------------------------

> p 태그를 감싸는 함수
---------------------------------------------------------------------------
# p 태그로 감싸는 함수
def p(content):
    # 기존 코드 주석 처리
    # return "<p>{}</p>".format(content)
    # 2020.01.25 - 요청 반영
    return "<p class='content-line'>{}</p>".format(content)

# 출력한다.
print(p("안녕하세요."))
print(p("간단한 HTML 태그를 만드는 예입니다."))

<p class='content-line'>안녕하세요.</p>
<p class='content-line'>간단한 HTML 태그를 만드는 예입니다.</p>
---------------------------------------------------------------------------

=====================================================================
# 3가지 키워드로 정리하는 핵심 포인트
- 재귀 함수(recursion function) : 내부에서 자기 자신을 호출하는 함수를 의미
- 메모화(memorization) : 한 번 계산한 값을 저장해 놓은 후, 이후에 다시 계산하지 않고 저장된
					   값을 활용하는 테크닉
- 조기 리턴(early return) : 함수의 흐름 중간에 return 키워드를 사용해서 코드 들여쓰기를 줄이는
						  등의 효과를 가져오는 테크닉
=====================================================================

