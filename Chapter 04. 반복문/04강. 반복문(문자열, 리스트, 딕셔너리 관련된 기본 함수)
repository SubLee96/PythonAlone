PythonAlone

04. 반복문
: 리스트, 딕셔너리, 범위를 이해한다.
: for 반복문과 리스트, 딕셔너리, 범위를 조합하는 방법을 배운다.
: while 반복문을 배운다.
: break 키워드와 continue 키워드를 이해한다.

04-4 문자열, 리스트, 딕셔너리와 관련된 기본 함수

- 리스트에 적용할 수 있는 기본 함수: min(), max(), sum()
- 리스트 뒤집기: reversed()
- 현재 인덱스가 몇 번째인지 확인하기: enumerate()
- 딕셔너리로 쉽게 반복문 작성하기: items()
- 리스트 안에 for문 사용하기: 리스트 내포

# 리스트에 적용할 수 있는 기본 함수: min(), max(), sum()
=====================================================================
함수			설명
min()		리스트 내부에서 최솟값을 찾는다.
max()		리스트 내부에서 최댓값을 찾는다.
sum()		리스트 내부에서 값을 모두 더한다.
=====================================================================

---------------------------------------------------------------------------
>>> numbers = [103, 52, 273, 32, 77]
>>> min(numbers)		# 리스트 내부에서 최솟값을 찾는다.
32
>>> max(numbers)		# 리스트 내부에서 최댓값을 찾는다.
273
>>> sum(numbers)		# 리스트 내부에서 값을 모두 더한다.
537
---------------------------------------------------------------------------

=====================================================================
# 리스트를 사용하지 않고 최솟값, 최댓값 구하기
- min()함수와 max()함수는 매개변수에 리스트를 사용하면 리스트 내부에서 최솟값과 최댓값을 찾는다.
  그러나, 매개변수에 리스트를 사용하지 않고 숫자 여러 개를 나열해서 최솟값과 최댓값을 찾는 방법도 있다.
>>> min(103, 52, 273)
52
>>> max(103, 52, 273)
273
=====================================================================

# reversed()함수로 리스트 뒤집기
: 리스트에서 요소의 순서를 뒤집고 싶을 경우

> reversed()함수
---------------------------------------------------------------------------
# 리스트를 선언하고 뒤집는다.
list_a = [1, 2, 3, 4, 5]
list_reversed = reversed(list_a)

# 출력한다.
print("# reversed() 함수")
print("reversed([1, 2, 3, 4, 5]):", list_reversed)
print("list(reversed([1, 2, 3, 4, 5])):", list(list_reversed))
print()

# 반복문을 적용해 본다.
print("# reversed() 함수와 반복문")
print("for i in reversed([1, 2, 3, 4, 5]):")
for i in reversed(list_a):
    print("-", i)

# reversed() 함수
reversed([1, 2, 3, 4, 5]): <list_reverseiterator object at 0x03AAD2E0>
list(reversed([1, 2, 3, 4, 5])): [5, 4, 3, 2, 1]

# reversed() 함수와 반복문
for i in reversed([1, 2, 3, 4, 5]):
- 5
- 4
- 3
- 2
- 1
---------------------------------------------------------------------------

> 제너레이터(generator): reversed()함수의 결과가 제너레이터이다.

---------------------------------------------------------------------------
numbers = [1, 2, 3, 4, 5, 6]

for i in reversed(numbers):
	print("첫 번째 반복문: {}".format(i))
	
for i in reversed(numbers):
	print("두 번째 반복문: {}".format(i))
---------------------------------------------------------------------------

=====================================================================
# 확장 슬라이싱
: 리스트를 뒤집을 수 있는 추가적인 방법으로, "확장 슬라이싱"이 있다.

>>> numbers = [1, 2, 3, 4, 5]
>>> numbers
[1, 2, 3, 4, 5]
>>> numbers[::-1]
[5, 4, 3, 2, 1]

>>> "안녕하세요"[::-1]
'요세하녕안'
=====================================================================

# enumerate()함수와 반복문 조합하기
[  example_list = ["요소A", "요소B", "요소C"]  ]
---------------------------------------------------------------------------
- 방법(1)
example_list = ["요소A", "요소B", "요소C"]
i = 0
for item in example_list:
	print("{}번째 요소는 {}입니다.".format(i, item))
	i += 1

방법(2)
example_list = ["요소A", "요소B", "요소C"]
for i in range(len(example_list)):
	print("{}번째 요소는 {}입니다.".format(i, example_list[i]))
---------------------------------------------------------------------------

> enumerate()함수를 사용하여 더 편리하게 사용할 수 있다.

> enumerate()함수와 리스트
---------------------------------------------------------------------------
# 변수를 선언한다.
example_list = ["요소A", "요소B", "요소C"]

# 그냥 출력한다.
print("# 단순 출력")
print("example_list")
print()

# enumerate() 함수를 적용해 출력한다.
print("# enumerate() 함수 적용 출력")
print(enumerate(example_list))
print()

# list() 함수로 강제 변환해 출력한다.
print(" #list() 함수로 강제 변환 출력")
print(list(enumerate(example_list)))
print()

# for 반복문과 enumerate() 함수 조합해서 사용하기
print("# 반복문과 조합하기")
for i, value in enumerate(example_list):    # enumerate()함수를 사용하면 반복 변수를 이런 형태로 넣을 수 있다.
    print("{}번째 요소는 {}입니다.".format(i, value))
      
# 단순 출력
example_list

# enumerate() 함수 적용 출력
<enumerate object at 0x00D8BCA8>

 #list() 함수로 강제 변환 출력
[(0, '요소A'), (1, '요소B'), (2, '요소C')]

# 반복문과 조합하기
0번째 요소는 요소A입니다.
1번째 요소는 요소B입니다.
2번째 요소는 요소C입니다.
---------------------------------------------------------------------------

=====================================================================
# 이터레이터와 튜플
-> pg. 204를 보면 더 알아볼 수 있다.
=====================================================================

# 딕셔너리의 items()함수와 반복문 조합하기

> 딕셔너리의 items()함수와 반복문
---------------------------------------------------------------------------
# 변수를 선언한다.
example_dictionary = {
    "키A": "값A",
    "키B": "값B",
    "키C": "키C"
}

# 딕셔너리의 items()함수 결과 출력하기
print("# 딕셔너리의 items() 함수")
print("items():", example_dictionary.items())
print()

# for 반복문과 items()함수 조합해서 사용하기
print("# 딕셔너리의 items()함수와 반복문 조합하기")

for key, element in example_dictionary.items():
    print("dictionary[{}] = {}".format(key, element))
   
# 딕셔너리의 items() 함수
items(): dict_items([('키A', '값A'), ('키B', '값B'), ('키C', '키C')])

# 딕셔너리의 items()함수와 반복문 조합하기
dictionary[키A] = 값A
dictionary[키B] = 값B
dictionary[키C] = 키C
---------------------------------------------------------------------------

# 리스트 내포
: 프로그램을 만들 때, 반복문을 사용해 리스트를 재조합하는 경우가 많다.

> 반복문을 사용한 리스트 생성
---------------------------------------------------------------------------
# 변수를 선언한다.
array = []

# 반복문을 적용한다.
for i in range(0, 20, 2):
    array.append(i * i)

# 출력한다.
print(array)

[0, 4, 16, 36, 64, 100, 144, 196, 256, 324]
---------------------------------------------------------------------------

: 파이썬 프로그래밍 언어는 이를 한 줄로 작성할 수 있는 방법을 제공한다.

> 리스트 안에 for문 사용하기
---------------------------------------------------------------------------
# 리스트를 선언한다.
array = [i * i for i in range(0, 20, 2)]

# 출력한다.
print(array)

[0, 4, 16, 36, 64, 100, 144, 196, 256, 324]
---------------------------------------------------------------------------

: 리스트 내포(list comprehensions) : "range(0, 20, 2)의 요소를 i라고 할 때, i * i로 리스트를 재조합해주세요."

[  리스트 이름 = [ 표현식 for 반복자 in 반복할 수 있는것 ]  ]

> 조건을 활용한 리스트 내포
---------------------------------------------------------------------------
# 리스트를 선언한다.
array = ["사과", "자두", "초콜릿", "바나나", "체리"]
output = [fruit for fruit in array if fruit != "초콜릿"]

# 출력한다.
print(output)

['사과', '자두', '바나나', '체리']
---------------------------------------------------------------------------
: "array의 요소를 fruit이라고 할 때, 초콜릿이 아닌 fruit으로 리스트를 재조합해 주세요."

[  리스트 이름 = [ 표현식 for 반복자 in 반복할 수 있는 것 if 조건문 ]  ]


# 좀 더 알아보기 : 구문 내부에 여러 줄 문자열을 사용했을 때의 문제점

> if 조건문과 여러 줄 문자열(1)
---------------------------------------------------------------------------
# 변수를 선언한다.
number = int(input("정수 입력> "))

# if 조건문으로 홀수 짝수를 구분한다.
if number % 2 == 0:
    print("""\
        입력한 문자열은 {}입니다.
        {}는(은) 짝수입니다.""".format(number, number))

else:
    print("""\
        입력한 문자열은 {}입니다.
        {}는(은) 홀수입니다.""".format(number, number))

정수 입력> 10
        입력한 문자열은 10입니다. (예상치 못한 들여쓰기가 나온다.)
        10는(은) 짝수입니다.
---------------------------------------------------------------------------

> if 조건문과 여러 줄 문자열(2)
---------------------------------------------------------------------------
# 변수를 선언한다.
number = int(input("정수 입력> "))

# if 조건문으로 홀수 짝수를 구분한다.
if number % 2 == 0:
    print("""입력한 문자열은 {}입니다.
{}는(은) 짝수입니다.""".format(number, number))

else:
    print("""입력한 문자열은 {}입니다.
{}는(은) 홀수입니다.""".format(number, number))

정수 입력> 10
입력한 문자열은 10입니다.
10는(은) 짝수입니다.
---------------------------------------------------------------------------
: 실행 결과는 맞는데 구문은 이상하게 나온다.

> if 조건문과 긴 문자열
---------------------------------------------------------------------------
# 변수를 선언한다.
number = int(input("정수 입력> "))

# if 조건문으로 홀수 짝수를 구분한다.
if number % 2 == 0:
    print("입력한 문자열은 {}입니다.\n{}는(은) 짝수입니다.".format(number, number))

else:
    print("입력한 문자열은 {}입니다.\n{}는(은) 홀수입니다.".format(number, number))

정수 입력> 10
입력한 문자열은 10입니다.
10는(은) 짝수입니다.
---------------------------------------------------------------------------

= 괄호로 문자열 연결하기

> 괄호로 문자열 연결하기
---------------------------------------------------------------------------
# 변수를 선언한다.
test = (
    "이렇게 입력해도 "
    "하나의 문자열로 연결되어 "
    "생성됩니다."
)

# 출력한다.
print("test:", test)
print("type(test):", type(test))

test: 이렇게 입력해도 하나의 문자열로 연결되어 생성됩니다.
type(test): <class 'str'>
---------------------------------------------------------------------------

=====================================================================
# 튜플 자료형의 구분
test = (
	...
	...
	...
)
=====================================================================

> 여러 줄 문자열과 if 구문을 조합했을 때의 문제 해결(1)
---------------------------------------------------------------------------
# 변수를 선언한다.
number = int(input("정수 입력> "))

# if 조건문으로 홀수 짝수를 구분한다.
if number % 2 == 0:
    print((
        "입력한 문자열은 {}입니다.\n"
        "{}는(은) 짝수입니다."
        ).format(number, number))
else:
    print((
        "입력한 문자열은 {}입니다.\n"		# 이처럼 \n를 실수하는 경우가 종종 있으니! 주의하자!!!
        "{}는(은) 홀수입니다."
        ).format(number, number))

정수 입력> 10
입력한 문자열은 10입니다.
10는(은) 짝수입니다.
---------------------------------------------------------------------------

= 문자열의 join()함수
[  문자열.join(문자열로 구성된 리스트)  ]

>>> print("::".join(["1", "2", "3", "4", "5"]))
1::2::3::4::5

> 여러 줄 문자열과 if 구문을 조합했을 때의 문제 해결(2)
---------------------------------------------------------------------------
# 변수를 선언한다.
number = int(input("정수 입력> "))

# if 조건문으로 홀수 짝수를 구분한다.
if number % 2 == 0:
    print("\n".join([
        "입력한 문자열은 {}입니다.",
        "{}는(은) 짝수입니다."
        ]).format(number, number))
else:
    print("\n".join([
        "입력한 문자열은 {}입니다.",
        "{}는(은) 홀수입니다."
        ]).format(number, number))
    
정수 입력> 10
입력한 문자열은 10입니다.
10는(은) 짝수입니다.
---------------------------------------------------------------------------

# 좀 더 알아보기 : 이터레이터

[  for 반복문 in 반복할 수 있는 것  ]

: 이터러블(iteralbe0 : 반복할 수 있는 것
: 내부에 있는 요소들을 차례차례 꺼낼 수 있는 객체

> reversed()함수와 이터레이터
---------------------------------------------------------------------------
# 변수를 선언한다.
numbers = [1, 2, 3, 4, 5, 6]
r_num = reversed(numbers)

# reversed_numbers를 출력한다.
print("reversed_numbers:", r_num)
print(next(r_num))
print(next(r_num))
print(next(r_num))
print(next(r_num))
print(next(r_num))

reversed_numbers: <list_reverseiterator object at 0x03CAD2E0>
6
5
4
3
2
---------------------------------------------------------------------------
: 메모리의 효율성을 높이기 위해서 reversed()함수가 리스트를 바로 리턴해주지 않고 이터레시터를 리턴해준다.

=====================================================================
# 3가지 키워드로 정리하는 핵심 포인트
- enumerate()함수 : 리스트를 매개변수로 넣을 경우 인덱스와 값을 쌍으로 사용해 반복문을 돌릴
				   수 있게 해주는 함수
- items()함수 : 키와 쌍으로 사용해 반복문을 돌릴 수 있게 해주는 딕셔너리 함수
- 리스트 내포 : 반복문과 조건문을 대괄호[] 안에 넣는 형태를 사용해서 리스트를 생성하는 파이썬의
			 특수한 구문으로 'list comprehensions'라 불린다.
=====================================================================

