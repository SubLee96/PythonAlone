PythonAlone

04. 반복문
: 리스트, 딕셔너리, 범위를 이해한다.
: for 반복문과 리스트, 딕셔너리, 범위를 조합하는 방법을 배운다.
: while 반복문을 배운다.
: break 키워드와 continue 키워드를 이해한다.

04-3 반복문과 while 반복문

> for 반복문과 함께 많이 사용되는 자료형인 범위(range)

# 범위
1. 매개변수에 숫자를 한 개 넣는 방법
[  range(A)  ]    # A는 숫자
2. 매개변수에 숫자를 두 개 넣는 방법
[  range(A, B)  ]    # A와 B는 숫자
3. 매개변수에 숫자를 세 개 넣는 방법
[  range(A, B, C)  ]    # A, B, C는 숫자

---------------------------------------------------------------------------
>>> a = range(5)
>>> a
range(0, 5)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(0, 5))		# 0부터 4까지의 정수 범위
[0, 1, 2, 3, 4]
>>> list(range(5, 10))		# 5부터 9까지의 정수 범위
[5, 6, 7, 8, 9]
>>> list(range(0, 10, 2))	# 0부터 10까지의 정수 중 2씩 증가
[0, 2, 4, 6, 8]
>>> list(range(0, 10, 3))	# 0부터 10까지의 정수 중 3씩 증가
[0, 3, 6, 9]
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> a = range(0, 10 + 1)
>>> list(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
---------------------------------------------------------------------------
: 내부 수식을 이용하여 표현

---------------------------------------------------------------------------
>>> n = 10
>>> a = range(0, n / 2)				# 매개변수로 나눗셈을 사용한 경우 오류 발생
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    a = range(0, n / 2)
TypeError: 'float' object cannot be interpreted as an integer
---------------------------------------------------------------------------
: range의 매개변수로 반드시 정수를 입력해야 한다.

---------------------------------------------------------------------------
>>> a = range(0, int(n / 2))	# 실수를 정수로 바꾸는 방법보다
>>> list(a)
[0, 1, 2, 3, 4]
>>> a = range(0, n // 2)		# 정수 나누기 연산자를 많이 사용한다!!!
>>> list(a)
[0, 1, 2, 3, 4]
---------------------------------------------------------------------------

# for 반복문: 범위와 함께 사용하기
=====================================================================
for 숫자 변수 in 범위:
	코드
=====================================================================

> for 반복문과 범위
---------------------------------------------------------------------------
# for 반복문과 범위를 함께 조합해서 사용한다.
for i in range(5):
    print(str(i) + "= 반복 변수")
print()

for i in range(5, 10):
    print(str(i) + "= 반복 변수")
print()

for i in range(0, 10, 3):
    print(str(i) + "= 반복 변수")
print()

0= 반복 변수
1= 반복 변수
2= 반복 변수
3= 반복 변수
4= 반복 변수

5= 반복 변수
6= 반복 변수
7= 반복 변수
8= 반복 변수
9= 반복 변수

0= 반복 변수
3= 반복 변수
6= 반복 변수
9= 반복 변수
---------------------------------------------------------------------------

# for 반복문: 리스트와 범위 조합하기
> 리스트와 범위를 조합해서 사용하기
---------------------------------------------------------------------------
# 리스트를 선언한다.
array = [273, 32, 103, 57, 52]

# 리스트에 반복문을 적용한다.
for i in range (len(array)):
    # 출력한다.
    print("{}번째 반복: {}".format(i, array[i]))
    
0번째 반복: 273
1번째 반복: 32
2번째 반복: 103
3번째 반복: 57
4번째 반복: 52
---------------------------------------------------------------------------
-> 더 편한 사용방법은 04-4에서 볼 수 있다.(pg. 194)

# for 반복문: 반대로 반복하기
: 큰 숫자에서 작은 숫자로 반복문을 적용해야 하는 경우도 있다. : "역반복문"

> 반대로 반복하기(1)
---------------------------------------------------------------------------
# 역반복문
for i in range(4, 0 - 1, -1):
    # 출력한다
    print("현재 반복 변수: {}".format(i))
    
현재 반복 변수: 4
현재 반복 변수: 3
현재 반복 변수: 2
현재 반복 변수: 1
현재 반복 변수: 0
---------------------------------------------------------------------------
: "0 - 1"는 "0까지 반복하고 싶어서 이 코드를 사용했어"라는 말을 강조한다.

> 반대로 반복하기(2)
---------------------------------------------------------------------------
# 역반복문
for i in reversed(range(5)):
    # 출력한다
    print("현재 반복 변수: {}".format(i))
    
현재 반복 변수: 4
현재 반복 변수: 3
현재 반복 변수: 2
현재 반복 변수: 1
현재 반복 변수: 0
---------------------------------------------------------------------------
: reversed()함수는 [0, 1, 2, 3, 4]라는 형태의 범위가 [4, 3, 2, 1, 0]이 된다.

# while 반복문
: 특정 횟수만큼 반복하는 경우 : for 반복문
: 범용적으로 사용할 수 있는 반복문 : while 반복문

=====================================================================
while 불 표현식:
	문장
=====================================================================

> 무한 반복
---------------------------------------------------------------------------
# while 반복문을 사용한다.
while True:
    # "."을 출력한다.
    # 기본적으로 end가 "\n"이라는 줄바꿈이 일어나는데,
    # 빈 문자열 ""로 바꿔서 줄바꿈이 일어나지 않게 한다.
    print(".", end="")

...........................................................................
...........................................................................
...........................................................................
...........................................................................
...........................................................................
...........................................................................
...........................
---------------------------------------------------------------------------
: "ctrl + c"를 눌러서 강제 종료해줘야 한다.

# while 반복문: for 반복문처럼 사용하기
> while 반복문을 for 반복문처럼 사용하기
---------------------------------------------------------------------------
# 반복 변수를 기반으로 반복하기
i = 0
while i < 10:
    print("{}번째 반복입니다.".format(i))
    i += 1

0번째 반복입니다.
1번째 반복입니다.
2번째 반복입니다.
3번째 반복입니다.
4번째 반복입니다.
5번째 반복입니다.
6번째 반복입니다.
7번째 반복입니다.
8번째 반복입니다.
9번째 반복입니다.
---------------------------------------------------------------------------

> for 반복문을 언급한 부분을 제외한 나머지는 모두 while문을 사용한다.
예) 무한 반복 루프

-> while문에서 중요한 요소는 "조건"이다. 
: 조건을 활용해서 반복을 사용해야 한다면 while문을 사용하는 것이 좋다!!!

# while 반복문: 상태를 기반으로 반복하기
: while 반복문을 활용하여 remove()함수보다 여러 자료 제거하기가 가능하다.

> 해당하는 값 모두 제거하기
---------------------------------------------------------------------------
# 변수를 선언한다.
list_test = [1, 2, 1, 2]
value = 2

# list_test 내부에 value가 있다면 반복
while value in list_test:
    list_test.remove(value)

# 출력한다.
print(list_test)

[1, 1]
---------------------------------------------------------------------------

# while 반복문: 시간을 기반으로 반복하기
: 유닉스 타임(unix time) : 세계 표준시(UTC)로 1970년 1월 1일 0시 0분 0초를 기준으로 몇 초가 지났는지를 정수로 표현함

>>> import time

>>> time.time()
1579669109.3620124

-> while문을 조합하면 특정 시간 동안 프로그램을 정지시킬 수 있다.

> 5초 동안 반복하기
---------------------------------------------------------------------------
# 시간과 관련된 기능을 가져온다.
import time

# 변수를 선언한다.
number = 0

# 5초 동안 반복한다.
target_tick = time.time() + 5
while time.time() < target_tick:
    number += 1

# 출력한다.
print("5초 동안 {}번 반복했습니다.".format(number))

5초 동안 25637768번 반복했습니다. (5초가 지난 후에 결과가 나옴)
---------------------------------------------------------------------------
: 컴퓨터의 성능과 상황에 따라 반복 횟수는 계속 달라진다.

=====================================================================
# for 반복문, while 반복문 중 무엇으로 작성할지가 고민이 될 경우!!!
> 직접 경험하면서 느껴야 한다.
=====================================================================

# while 반복문: break 키워드/continue 키워드
- break 키워드 : 반복문을 벗어날 때 사용하는 키워드

> break 키워드
---------------------------------------------------------------------------
# 변수를 선언한다
i = 0

# 무한 반복한다.
while True:
    # 몇 번째 반복인지 출력한다.
    print("{}번째 반복문입니다.".format(i))
    i = i + 1
    # 반복을 종료한다.
    input_text = input("> 종료하시겠습니까?(y): ")
    if input_text in ["y", "Y"]:
        print("반복을 종료합니다.")
        break

0번째 반복문입니다.
> 종료하시겠습니까?(y): n
1번째 반복문입니다.
> 종료하시겠습니까?(y): n
2번째 반복문입니다.
> 종료하시겠습니까?(y): n
3번째 반복문입니다.
> 종료하시겠습니까?(y): n
4번째 반복문입니다.
> 종료하시겠습니까?(y): y
반복을 종료합니다.
---------------------------------------------------------------------------
: "y" 또는 "Y"를 입력하면 break 키워드를 만나 반복문을 벗어나게 된다.

- continue 키워드 : 현재 반복을 생략하고, 다음 반복으로 넘어갈 때 사용하는 키워드
> continue 키워드
---------------------------------------------------------------------------
# 변수를 선언한다.
numbers = [5, 15, 6, 20, 7, 25]

# 반복을 돌린다.
for number in numbers:
    # number가 10보다 작으면 다음 반복으로 넘어간다.
    if number < 10:
        continue
    # 출력한다.
    print(number)

15
20
25
---------------------------------------------------------------------------
: if-else 구문을 사용해도 된다.

=====================================================================
- continue 키워드를 사용하지 않은 경우
# 반복을 돌린다.
for number in numbers:
	# 반복 대상을 한정한다.
	if number >= 10:
		# 문장
		# 문장
		# 문장
		# 문장
		# 문장
		
- continue 키워드를 사용한 경우:
# 반복을 돌린다.
for number in numbers:
	# 반복 대상에서 제외해버린다.
	if number < 10:
		continue
	# 문장
	# 문장
	# 문장
	# 문장		
	# 문장
=====================================================================
: continue를 사용하면 들여쓰기를 하나 줄일 수 있다.

=====================================================================
# 4가지 키워드로 정리하는 핵심 포인트
- 범위(range) : 정수의 범위를 나타내는 값. range()함수로 생성한다.
- while 반복문 : 조건식을 기반으로 특정 코드로 반복해서 실행할 경우에 사용하는 구문
- break 키워드 : 반복문을 벗어날 때 사용하는 구문
- continue 키워드 : 반복문의 현재 반복을 생략할 때 사용하는 구문
=====================================================================

