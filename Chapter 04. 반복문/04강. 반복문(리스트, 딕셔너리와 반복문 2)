PythonAlone

04. 반복문
: 리스트, 딕셔너리, 범위를 이해한다.
: for 반복문과 리스트, 딕셔너리, 범위를 조합하는 방법을 배운다.
: while 반복문을 배운다.
: break 키워드와 continue 키워드를 이해한다.

04-2 딕셔너리와 반복문

> 리스트(list) : 인덱스를 기반으로 값을 저장하는 것
> 딕셔너리(dictionary) : 키를 기반으로 값을 저장하는 것

{
	"키A": 10,	# 문자열을 키로 사용하기
	"키B": 20,
	"키C": 30,
	1:    40,	# 숫자를 키로 사용하기
	False: 50	# 불을 키로 사용하기
}

=====================================================================
자료형		의미					가리키는 위치	선언 형식
리스트		인덱스를 기반으로 값을 저장	인덱스			변수 = []
딕셔너리	키를 기바능로 값을 저장		키			변수 = {}
=====================================================================

# 딕셔너리 선언하기
: 중괄호{}로 선언하며, '키:값'형태를 쉼표(,)로 연결해서 만든다.
: 키는 문자열, 숫자, 불 등으로 선언할 수 있다.

=====================================================================
변수 = {
	키: 값,
	키: 값,
	...
	키: 값
}
=====================================================================

---------------------------------------------------------------------------
>>> dict_a = {
		"name": "어벤저스 엔드게임",
		"type": "히어로 무비"
		}
---------------------------------------------------------------------------

> 인터랙티브 셸에서 딕셔너리를 만들 때는 위의 코드처럼 닫는 괄호가 들여쓰기 뒤에 붙게 작성할 수밖에 없다.
  (파일에 딕셔너리를 작성할 때는 닫는 괄호 앞에 들여쓰기를 넣지 않아도 된다.)
  
# 딕셔너리의 요소에 접근하기
---------------------------------------------------------------------------
>>> dict_a
{'name': '어벤저스 엔드게임', 'type': '히어로 무비'}
---------------------------------------------------------------------------
: 딕셔너리를 선언할 때는 중괄호{}를 사용하지만, 딕셔너리의 요소에 접근할 때는 리스트처럼 딕셔너리 뒤에 대괄호[]를 입력하고
  내부에 인덱스처럼 키를 입력한다.
  
---------------------------------------------------------------------------
>>> dict_a["name"]
'어벤저스 엔드게임'
>>> dict_a["type"]
'히어로 무비'
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> dict_b = {
	"director": ["안소니 루소", "조 루소"],
	"cast": ["아이언맨", "타노스", "토르", "닥터스트레인지", "헐크"]
	}
>>> dict_b
{'director': ['안소니 루소', '조 루소'], 'cast': ['아이언맨', '타노스', '토르', '닥터스트레인지', '헐크']}
>>> dict_b["director"]
['안소니 루소', '조 루소']
---------------------------------------------------------------------------

=====================================================================
구분		선언 형식			사용 예			틀린 예
리스트		list_a = []		list_a[1]		
딕셔너리	dict_a = {}		dict_a["name"]	dict_a{"name"}  # 처음 파이썬에서 많이 하는 실수
=====================================================================

> 딕셔너리의 요소에 접근하기
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임",
    "ingredient": ["망고", "설탕", "메타중아황산나트륨", "치자황색소"],
    "origin": "필리핀"
    }

# 출력한다
print("name:", dictionary["name"])
print("type:", dictionary["type"])
print("ingredient:", dictionary["ingredient"])
print("origin:", dictionary["origin"])
print()

# 값을 변경한다
dictionary["name"] = "8D 건조 망고"
print("name:", dictionary["name"])

name: 7D 건조 망고
type: 당절임
ingredient: ['망고', '설탕', '메타중아황산나트륨', '치자황색소']
origin: 필리핀

name: 8D 건조 망고
---------------------------------------------------------------------------

>>> dictionary["ingredient"]
['망고', '설탕', '메타중아황산나트륨', '치자황색소']
>>> dictionary["ingredient"][1]
'설탕'
---------------------------------------------------------------------------

= 딕셔너리의 문자열 키와 관련된 실수 (예외처리)
: NameError

---------------------------------------------------------------------------
>>> dict_key = {
	name: "7D 건조망고",
	type: "당절임"
	}
Traceback (most recent call last):
  File "<pyshell#20>", line 2, in <module>
    name: "7D 건조망고",
NameError: name 'name' is not defined
---------------------------------------------------------------------------
: Name이라는 이름이 정의되지 않았다는 오류

-> name이라는 이름을 변수로 만들어주면 된다.

---------------------------------------------------------------------------
>>> name = "이름"
>>> dict_key = {
	name: "7D 건조 망고",
	type: "당절임"
	}
>>> dict_key
{'이름': '7D 건조 망고', <class 'type'>: '당절임'}
---------------------------------------------------------------------------

# 딕셔너리에 값 추가하기/제거하기
[  딕셔너리[새로운 키] = 새로운 값  ]
---------------------------------------------------------------------------
>>> dictionary["price"] = 5000
>>> dictionary
{'name': '8D 건조 망고', 'type': '당절임', 'ingredient': ['망고', '설탕', '메타중아황산나트륨',
 '치자황색소'], 'origin': '필리핀', 'price': 5000}
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> dictionary["name"] = "8D 건조 파인애플"
>>> dictinary
>>> dictionary
{'name': '8D 건조 파인애플', 'type': '당절임', 'ingredient': ['망고', '설탕', '메타중아황산나트륨',
 '치자황색소'], 'origin': '필리핀', 'price': 5000}
---------------------------------------------------------------------------
: name에 새로운 값을 대체

---------------------------------------------------------------------------
>>> del dictionary["ingredient"]
>>> dictionary
{'name': '8D 건조 파인애플', 'type': '당절임', 'origin': '필리핀', 'price': 5000}
---------------------------------------------------------------------------
: ingredient를 제거

> 딕셔너리에 요소 추가하기
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {}

# 요소 추가 전에 내용을 출력한다
print("요소 추가 이전:", dictionary)

# 딕셔너리에 요소를 추가한다.
dictionary["name"] = "새로운 이름"
dictionary["head"] = "새로운 정신"
dictionary["body"] = "새로운 몸"

# 출력한다
print("요소 추가 이후:", dictionary)

요소 추가 이전: {}
요소 추가 이후: {'name': '새로운 이름', 'head': '새로운 정신', 'body': '새로운 몸'}
---------------------------------------------------------------------------

> 딕셔너리에 요소 제거하기
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임"
    }

# 요소 제거 전에 내용을 출력한다
print("요소 제거 이전:", dictionary)

# 딕셔너리에 요소를 제거한다.
del dictionary["name"]
del dictionary["type"]

# 출력한다
print("요소 제거 이후:", dictionary)


요소 제거 이전: {'name': '7D 건조 망고', 'type': '당절임'}
요소 제거 이후: {}
---------------------------------------------------------------------------

# KeyError 예외 (예외처리)
: 딕셔너리도 존재하지 않는 키에 접근하면 KeyError가 발생한다.

---------------------------------------------------------------------------
>>> dictionary = {}
>>> dictionary["Key"]
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    dictionary["Key"]
KeyError: 'Key'
---------------------------------------------------------------------------
: 키를 기반으로 값을 저장하므로 KeyError가 발생하게 된다.

# 딕셔너리 내부에 키가 있는지 확인하기
: KeyError가 발생할 수도 있기에 존재하는 키인지, 존재하지 않는 키인지를 확인해야 한다.

= in 키워드
: 리스트 내부에 값이 있는지 없는지 확인할 때 in 키워드를 사용한다.

> 키가 존재하는지 확인하고 값에 접근하기
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임",
    "ingredient": ["망고", "설탕", "메타중아황산나트륨", "치자황색소"],
    "origin": "필리핀"
    }

# 사용자로부터 입력을 받는다.
key = input("> 접근하고자 하는 키: ")

# 출력한다.
if key in dictionary:
    print(dictionary[key])
else:
    print("존재하지 않는 키에 접근하고 있습니다.")

> 접근하고자 하는 키: name
7D 건조 망고
> 접근하고자 하는 키: ㅇ ㅂ ㅇ
존재하지 않는 키에 접근하고 있습니다.
---------------------------------------------------------------------------

= get()함수
: 존재하지 않는 키에 접근하는 상황에 대한 두 번째 대처 방법

> 키가 존재하지 않을 때 None을 출력하는지 확인하기
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임",
    "ingredient": ["망고", "설탕", "메타중아황산나트륨", "치자황색소"],
    "origin": "필리핀"
    }

# 존재하지 않는 키에 접근해 본다.
value = dictionary.get("존재하지 않는 키")
print("값:", value)

# None 확인 방법
if value == None:    # None과 같은지 확인만 하면 된다.
    print("존재하지 않는 키에 접근했다.")

값: None
존재하지 않는 키에 접근했다.
---------------------------------------------------------------------------

# for 반복문: 딕셔너리와 함께 사용하기
=====================================================================
for 키 변수 in 딕셔너리:
	코드
=====================================================================

> for 반복문과 딕셔너리
---------------------------------------------------------------------------
# 딕셔너리를 선언한다.
dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임",
    "ingredient": ["망고", "설탕", "메타중아황산나트륨", "치자황색소"],
    "origin": "필리핀"
    }

# for 반복문을 사용한다.
for key in dictionary:
    # 출력한다.
    print(key, ":", dictionary[key])
    
name : 7D 건조 망고
type : 당절임
ingredient : ['망고', '설탕', '메타중아황산나트륨', '치자황색소']
origin : 필리핀
---------------------------------------------------------------------------

=====================================================================
# 3가지 키워드로 정리하는 핵심 포인트
- 딕셔너리(dictionary): 키를 기반으로 여러 자료를 저장하는 자료형
- 키(key): 딕셔너리 내부에서 값에 접근할 때 사용하는 것
- 값(value): 딕셔너리 내부에 있는 각각의 내용
=====================================================================

