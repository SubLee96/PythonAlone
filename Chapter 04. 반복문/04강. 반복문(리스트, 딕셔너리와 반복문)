PythonAlone

04. 반복문
: 리스트, 딕셔너리, 범위를 이해한다.
: for 반복문과 리스트, 딕셔너리, 범위를 조합하는 방법을 배운다.
: while 반복문을 배운다.
: break 키워드와 continue 키워드를 이해한다.

04-1 리스트와 반복문

> 여러 개의 값을 나타낼 수 있게 해주는 자료형 : '리스트, 딕셔너리'

 리스트(list) : 자료를 저장할 수 있는 자료	
			: [](대괄호)를 이용하여 묶어준다.
---------------------------------------------------------------------------
>>> array = [ 273, 32, 103, "문자열", True, False]
>>> print(array)
[273, 32, 103, '문자열', True, False]
---------------------------------------------------------------------------
			
# 리스트 선언하고 요소에 접근하기
: 대괄호[]에 자료를 쉼표로 구분하여 입력한다.
: 내부에 들어가는 자료를 '요소(element)'라 부른다.

[ 요소, 요소, ... ]

---------------------------------------------------------------------------
>>> [1, 2, 3, 4]						# 숫자로만 구성된 리스트
[1, 2, 3, 4]
>>> ["안", "녕", "하", "세", "요"]			# 문자열만으로 구성된 리스트
['안', '녕', '하', '세', '요']		
>>> [273, 32, 103, "문자열", True, False]	# 여러 아료형으로 구성된 리스트
[273, 32, 103, '문자열', True, False]
---------------------------------------------------------------------------
: 여러 종류의 자료형도 사용할 수 있다.
: 리스트 안에 있는 요소를 각각 사용하려면 리스트 이름 바로 뒤에 대괄호[]를 입력하고, 자료의 위치를 나타내는 숫자를 입력해야한다.

list_a = [273, 32, 103, "문자열", True, False]

- 인덱스(index) : 대괄호[] 안에 들어간 숫자
---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, "문자열", True, False]
>>> list_a[0]
273
>>> list_a[1]
32
>>> list_a[2]
103
>>> list_a[1:3]
[32, 103]
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, "문자열", True, False]
>>> list_a[0] = "변경"
>>> list_a
['변경', 32, 103, '문자열', True, False]
---------------------------------------------------------------------------
: 리스트의 특정 요소는 변경할 수 있다.

1. 첫째, 대괄호 안에 음수를 넣어 뒤에서부터 요소를 선택할 수 있다.
: 대괄호 안에 음수를 넣어 뒤에서부터 요소를 선택할 수 있다.
---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, "문자열", True, False]
>>> list_a[-1]
False
>>> list_a[-2]
True
>>> list_a[-3]
'문자열'
---------------------------------------------------------------------------

2. 리스트 접근 연산자를 다음과 같이 이중으로 사용할 수 있다.
---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, "문자열", True, False]
>>> list_a[3]
'문자열'
>>> list_a[3][0]
'문'
---------------------------------------------------------------------------

3. 리스트 안에 리스트를 사용할 수 있다.
---------------------------------------------------------------------------
>>> list_a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> list_a[1]
[4, 5, 6]
>>> list_a[1][1]
5
---------------------------------------------------------------------------

= 리스트에서의 IndexError 예외
: 리스트의 길이를 넘는 인덱스로 요소에 접근하려고 할 때 발생하는 예외
(요소가 존재하지 않는 위치에서 요소를 꺼내려고 할때 발생한다.)

---------------------------------------------------------------------------
>>> list_a = [273, 32, 103]
>>> list_a[3]
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    list_a[3]
IndexError: list index out of range
---------------------------------------------------------------------------

# 리스트 연산자: 연결(+), 반복(*), len()

> 리스트 연산자
---------------------------------------------------------------------------
# 리스트를 선언한다.
list_a = [1, 2, 3]
list_b = [4, 5, 6]

# 출력한다.
print("#리스트")
print("list_a =", list_a)
print("list_b =", list_b)
print()

# 기본 연산자
print("# 리스트 기본 연산자")
print("list_a + list_b =", list_a + list_b)		# 문자열 연결 연산자
print("list_a * 3 =", list_a * 3)				# 문자열 반복 연산자
print()

# 함수
print("# 길이 구하기")						# len()함수 : 내부에 문자열의 글자 수(길이)를 세어준다.리스트 변수를 넢으면 요소의 개수를 세어준다.
print("len(list_a) =", len(list_a))

#리스트
list_a = [1, 2, 3]
list_b = [4, 5, 6]

# 리스트 기본 연산자
list_a + list_b = [1, 2, 3, 4, 5, 6]		
list_a * 3 = [1, 2, 3, 1, 2, 3, 1, 2, 3]	

# 길이 구하기
len(list_a) = 3
---------------------------------------------------------------------------

# 리스트에 요소 추가하기: append, insert
[  리스트명.append(요소)  ]
[  리스트명.insert(위치, 요소)  ]

> 리스트에 요소 추가하기
---------------------------------------------------------------------------
# 리스트를 선언한다.
list_a = [1, 2, 3]

# 출력한다.
print("#리스트 뒤에 요소 추가하기")
list_a.append(4)
list_a.append(5)
print(list_a)
print()

# 리스트 중간에 요소 추가하기
print("# 리스트 중간에 요소 추가하기")
list_a.insert(0, 10)
print(list_a)

#리스트 뒤에 요소 추가하기
[1, 2, 3, 4, 5]

# 리스트 중간에 요소 추가하기
[10, 1, 2, 3, 4, 5]
---------------------------------------------------------------------------

: extend()함수 : 한 번에 여러 요소를 추가하고 싶을 경우
---------------------------------------------------------------------------
>>> list_a = [1, 2, 3]
>>> list_a.extend([4, 5, 6])
>>> print(list_a)
[1, 2, 3, 4, 5, 6]
---------------------------------------------------------------------------
: append()를 여러 번 반복하는 효과

= 리스트 연결 연산자와 요소 추가의 차이
: extend()함수는 리스트와 비슷한 형태로 동작한다. 단, 차이점이 존재한다.
---------------------------------------------------------------------------
>>> list_a = [1, 2, 3]
>>> list_b = [4, 5, 6]
>>> list_a + list_b    # 리스트 연결 연산자로 연결하니,
[1, 2, 3, 4, 5, 6]    # 실행결과로 [1, 2, 3, 4, 5, 6]이 나왔다.
>>> list_a    # list_a와 list_b에는 어떠한 변화도 없다.(비파괴적 처리).
[1, 2, 3]
>>> list_b
[4, 5, 6]
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> list_a = [1, 2, 3]
>>> list_b = [4, 5, 6]
>>> list_a.extend(list_b)    # 실행결과로 아무 것도 출력하지 않는다.
>>> list_a    # 앞에 입력했던 list_a 자체에 직접적인 변화가 있다.(파괴적 처리)
[1, 2, 3, 4, 5, 6]
>>> list_b
[4, 5, 6]
---------------------------------------------------------------------------

- 비파괴적 : 리스트와 같이 원본에 어떠한 영향도 주지 않는 것
- 파괴적 : append(), insert(), extend()함수와 같이 리스트에 직접적인 영향을 주는 함수 또는 연산

> 자료는 일반적으로 비파괴적으로 사용하는 과정이 좋다.
  (새로운 결과도 활용할 수 있으므로 선택지가 더 넓다.)
  그러나, 리스트 자료가 프로그래밍 언어가 얼마나 큰지도 모른 상태에서 '원본과 결과'라는 두 가지로 생성하는 것은 위험성이 다분하다.
  (파이썬은 원본을 직접적으로 조작하는 기능을 제공해서 위험을 피할 수 있다.)
  
# 리스트에 요소 제거하기
1. 인덱스로 제거하기
2. 값으로 제거하기
  
= 인덱스로 제거하기: del, pop
: 요소의 위치를 기반으로 요소를 제거하는 것 : del 키워드, pop()함수
[  del 리스트명  ]
[  리스트명.pop(인덱스)  ]

> 리스트 연결 연산자와 요소 추가의 차이
---------------------------------------------------------------------------
list_a = [0, 1, 2, 3, 4, 5]
print("# 리스트의 요소 하나 제거하기")

# 제거 방법[1] - del
del list_a[1]
print("del list_a[1]:", list_a)

# 제거 방법[2] - pop
list_a.pop(2)
print("pop(2):", list_a)

# 리스트의 요소 하나 제거하기
del list_a[1]: [0, 2, 3, 4, 5]
pop(2): [0, 2, 4, 5]
---------------------------------------------------------------------------
: pop()함수의 매개변수에 아무 것도 입력하지 않는 경우에 자동으로 -1이 대입되어 마지막 요소가 제거된다.

---------------------------------------------------------------------------
>>> list_b = [0, 1, 2, 3, 4, 5, 6]
>>> del list_b[3:6]
>>> list_b
[0, 1, 2, 6]

>>> list_c = [0, 1, 2, 3, 4, 5, 6]
>>> del list_c[:3]
>>> list_c
[3, 4, 5, 6]

>>> list_d = [0, 1, 2, 3, 4, 5, 6]
>>> del list_d[3:]
>>> list_d
[0, 1, 2]
---------------------------------------------------------------------------

= 값으로 제거하기: remove
[  리스트.remove(값)  ]

---------------------------------------------------------------------------
>>> list_c = [1, 2, 1, 2]    # 리스트 선언하기
>>> list_c.remove(2)    # 리스트 요소를 값으로 제거하기
>>> list_c
[1, 1, 2]
---------------------------------------------------------------------------
: remove()함수는 리스트 내부에 여러 개 있어도 가장 먼저 발견되는 하나만 제거한다.

> 리스트에 중복된 여러 개의 값을 모두 제거하려면 반복문과 조합해서 사용해야 한다. : while문

= 모두 제거하기: clear
[  리스트.clear()  ]

---------------------------------------------------------------------------
>>> list_d = [0, 1 , 2, 3 , 4, 5]
>>> list_d.clear()
>>> list_d
[]    # 요소가 모두 제거되었다.
---------------------------------------------------------------------------

# 리스트 내부에 있는지 확인하기: in/not in 연산자
[  값 in 리스트  ]

---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, 57, 52]
>>> 273 in list_a
True
>>> 99 in list_a
False
>>> 100 in list_a
False
>>> 52 in list_a
True
---------------------------------------------------------------------------

---------------------------------------------------------------------------
>>> list_a = [273, 32, 103, 57, 52]
>>> 273 not in list_a
False
>>> 99 not in list_a
>>> 100 not in list_a
True
>>> 52 not in list_a
False
>>> not 273 in list_a
False
---------------------------------------------------------------------------
: in 연산자를 사용하고 전체를 not으로 감싸는 방법이 있고, not in 연산자를 사용하는 방법도 있으나, not in이 가독성이 높다.

# for 반복문
: 컴퓨터가 인간보다 뛰어난 능력인... 반복문

---------------------------------------------------------------------------
print("출력")
print("출력")
print("출력")
print("출력")
print("출력")

for i in range(100):
    print("출력")

출력
출력
출력
출력
출력

출력
...
* 100
---------------------------------------------------------------------------

# for 반복문: 리스트와 함께 사용하기
=====================================================================
for 반복자 in 반복할 수 있는 것:
	코드
=====================================================================

> for 반복문과 리스트
---------------------------------------------------------------------------
# 리스트를 선언한다.
array = [273, 32, 103, 57, 52]

# 리스트에 반복문을 적용한다.
for element in array:
    # 출력한다.
    print(element)
    
273
32
103
57
52
---------------------------------------------------------------------------

=====================================================================
# for 반복문과 문자열
: for 반복문은 문자열을 함께 사용한다.

for character in "안녕하세요":
	print("-", character)
	
- 안
- 녕
- 하
- 세
- 요
=====================================================================

=====================================================================
# 4가지 키워드로 정리하는 핵심 포인트
- 리스트(list) : 여러 가지 자료를 저장할 수 있는 자료형
- 요소(element) : 리스트 내부에 있는 각각의 내용을 의미
- 인덱스(index) : 리스트 내부에서 값의 위치를 의미
- for 반복문 : 특정 코드를 반복해서 실행할 때 사용하는 기본적인 구문
=====================================================================

