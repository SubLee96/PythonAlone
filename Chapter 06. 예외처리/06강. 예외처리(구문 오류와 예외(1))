PythonAlone

05. 함수
'구문 오류(syntax error)와 실행 후에 발생하는 '예외(exception)'로 구분할 수 있다.'

: 구문 오류와 예외를 구분한다.
: 예외 처리하는 방법을 이해한다.
: 예외를 강제로 발생시키는 방법과 이해한다.

06-1 구문 오류와 예외(1)
> 일반적으로 프로그램이 예상치 못한 상황이 발생했을 경우, 어떻게 수행할지 몰라 죽어버린다.

# 오류의 종류
- 구문 오류(syntax error) : 프로그램 실행 전에 발생하는 오류
- 예외(Exception), 런타임 오류(runtime error) : 프로그램 실행 중에 발생하는 오류

= 구문 오류
: 괄호의 개수, 들여쓰기 문제 등으로 인해 프로그램이 실행되기도 전에 발생하는 오류이다.

> 구문 오류가 발생하는 코드
---------------------------------------------------------------------------
# 프로그램 시작
print(" # 프로그램이 시작되었습니다.")

# 구문 오류 발생 코드
print("# 예외를 강제로 발생시켜 볼게요!)

: 실행하면 EOL(End Of Line)이라 하여 프로그램이 싱행조차 되지 않는 오류이다.
"SyntaxError: EOL while scanning string literal"
---------------------------------------------------------------------------

> 구문 오류 해결
---------------------------------------------------------------------------
# 프로그램 시작
print("# 프로그램이 시작되었습니다.")

# 구문 오류 발생 코드
print("# 예외를 강제로 발생시켜 볼게요!")

# 프로그램이 시작되었습니다.
# 예외를 강제로 발생시켜 볼게요!
---------------------------------------------------------------------------

= 예외
: 예외 또는 런타임 오류 : 실행 중에 발생하는 오류

> 예외가 발생하는 코드
---------------------------------------------------------------------------
# 프로그램 시작
print("# 프로그램이 시작되었습니다.")

# 예외 발생 코드
list_a[1]

# 프로그램이 시작되었습니다.  -> 여기까지는 실행되었다.
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/6단원/exception01.py", line 5, in <module>
    list_a[1]
NameError: name 'list_a' is not defined
---------------------------------------------------------------------------

> 예외 해결
---------------------------------------------------------------------------
# 프로그램 시작
print("# 프로그램이 시작되었습니다.")

# 예외 발생 코드
list_a = [1, 2, 3, 4, 5]
list_a[1]

# 프로그램이 시작되었습니다.
---------------------------------------------------------------------------

# 기본 예외 처리
: 예외 처리(exception handling)
- 조건문을 사용하는 방법
- try 구문을 사용하는 방법

= 예외 상황 확인하기

> 예외가 발생할 수 있는 코드
---------------------------------------------------------------------------
# 숫자를 입력받는다.
number_input_a = int(input("정수 입력> "))

# 출력한다.
print("원의 반지름:", number_input_a)
print("원의 둘레:", 2 * 3.14 * number_input_a)
print("원의 넓이:", 3.14 * number_input_a * number_input_a)

정수 입력> 7 센테미터
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/6단원/exception_handling01.py", line 2, in <module>
    number_input_a = int(input("정수 입력> "))
ValueError: invalid literal for int() with base 10: '7 센테미터'
---------------------------------------------------------------------------
: 정수를 입력하지 않을 경우에 오류가 발생하게 된다.

= 조건문으로 예외 처리하기
: '정수를 입력하지 않았을 때'를 조건으로 만들 수 있다.

> 조건문으로 예외 처리하기
---------------------------------------------------------------------------
# 숫자를 입력받는다.
user_input_a = input("정수 입력> ")

# 사용자 입력이 숫자로만 구성되어 있을 때
if user_input_a.isdigit():
    # 숫자로 변환한다.
    number_input_a = int(user_input_a)
    # 출력한다.
    print("원의 반지름:", number_input_a)
    print("원의 둘레:", 2 * 3.14 * number_input_a)
    print("원의 넓이:", 3.14 * number_input_a * number_input_a)
else:
    print("정수를 입력하지 않았습니다.")

정수 입력> 7 센티미터
정수를 입력하지 않았습니다.
---------------------------------------------------------------------------
: 프로그램이 중간에 강제로 죽지 않고 정상으로 종료된다.

-> 항상 프로그램을 작성할 때는 항상 예외적인 상황까지 모두 생각하는 습관을 기르는게 좋다!

