PythonAlone

06. 예외처리

: 구문 오류와 예외를 구분한다.
: 예외 처리하는 방법을 이해한다.
: 예외를 강제로 발생시키는 방법과 이해한다.

06-2 예외고급(2)

# 모든 예외 잡기
: 만약 예외 조건에 일치하는 것이 없다면 당연히 예외가 발생하며 프로그램이 강제 종료된다.

> 예외 처리를 했지만 예외를 못 잡는 경우
---------------------------------------------------------------------------
# 변수를 선언한다.
list_number = [52, 273, 32, 72, 100]

# try except 구문으로 예외를 처리한다.
try:
    # 숫자를 입력받는다.
    number_input = int(input("정수 입력> "))
    # 리스트의 요소를 출력한다.
    print("{}번째 요소: {}".format(number_input, list_number[number_input]))
    예외.발생해주세요()
except ValueError as exception:
    # ValueError가 발생하는 경우
    print("정수를 입력해 주세요!")
    print(type(exception), exception)
except IndexError as exception:
    print("리스트의 인덱스를 벗어났어요!")
    print(type(exception), exception)

정수 입력> 1
1번째 요소: 273
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/6단원/6-2/except03.py", line 10, in <module>
    예외.발생해주세요()
NameError: name '예외' is not defined
---------------------------------------------------------------------------
: 이런 식으로 진행하면 예외가 발생해 프로그램이 강제 종료된다.
> else구문처럼 마지막에는 모든 예외의 부모라 할 수 있는 Exception을 넣어서 프로그램을 작성한다.

> 모든 예외 잡기
---------------------------------------------------------------------------
# 변수를 선언한다.
list_number = [52, 273, 32, 72, 100]

# try except 구문으로 예외를 처리한다.
try:
    # 숫자를 입력받는다.
    number_input = int(input("정수 입력> "))
    # 리스트의 요소를 출력한다.
    print("{}번째 요소: {}".format(number_input, list_number[number_input]))
    예외.발생해주세요()
except ValueError as exception:
    # ValueError가 발생하는 경우
    print("정수를 입력해 주세요!")
    print(type(exception), exception)
except IndexError as exception:
    print("리스트의 인덱스를 벗어났어요!")
    print(type(exception), exception)
except Exception as exception:
    # 이외의 예외가 발생한 경우
    print("미리 파악하지 못한 예외가 발생했습니다.")
    print(type(exception), exception)

정수 입력> 1
1번째 요소: 273
미리 파악하지 못한 예외가 발생했습니다.
<class 'NameError'> name '예외' is not defined
---------------------------------------------------------------------------

> 모든 예외를 예측한다는 말은 쉬운 것만은 아니다.
(최대한 잡을 수 있는 만큼 잡아야 한다!!!)

# raise 구문
: 예외 처리 부분은 필수적이지만, '아직 구현하지 않은 부분이니까 확실하게 문제가 생기게 만들자.'
  또는 '이 부분을 넘어가면 나중에 큰 문제가 발생하니까 여기에서 강제 종료시키자.'라는 경우도 있다.
  
> 아직 구현되지 않은 부분에서 강제로 예외 발생시키기
---------------------------------------------------------------------------
# 입력을 받는다.
number = input("정수 입력> ")
number = int(number)

# 조건문 사용
if number > 0:
    # 양수일 때: 아직 미구현 상태이다.
    raise NotImplementedError
else:
    # 음수일 때: 아직 미구현 상태이다.
    raise NotImplementedError

정수 입력> 1
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/6단원/6-2/except04.py", line 8, in <module>
    raise NotImplementedError
NotImplementedError
---------------------------------------------------------------------------

[  raise 예외 객체  ]
: 예외를 강제로 발생시키는 기능

Django 코드에서 finally 찾아보기
---------------------------------------------------------------------------
def get_geometry_type(self, table_name, geo_col):
    cursor = self.connection.cursor()
    try:
        cursor.execute('DESCRIBE %s' %self.connection.ops.quote_name(table_name))
        for column, typ, null, key, default, extra in cursor.fetchall():
            if column == geo_col:
                field_type = OGRGeomType(typ).django
                field_params = {}
                break
    finally:
        cursor.close()
---------------------------------------------------------------------------

finally가 없을 경우의 코드
---------------------------------------------------------------------------
def get_geometry_type(self, table_name, geo_col):
    cursor = self.connection.cursor()
    try:
        cursor.execute('DESCRIBE %s' %self.connection.ops.quote_name(table_name))
        for column, typ, null, key, default, extra in cursor.fetchall():
            if column == geo_col:
                field_type = OGRGeomType(typ).django
                field_params = {}
                break
    except:
        # 예외가 발생했을 때 닫기
        cursor.close()
    # 정상적으로 끝났을 때 닫기
    cursor.close()
---------------------------------------------------------------------------

=====================================================================
# 3가지 키워드로 정리하는 핵심 포인트
- 예외 객체 : 예외와 관련된 정보를 담고 있는 객체
- raise 구문 : 예외를 강제로 발생시킬 때 사용하는 구문
- GitHub 검색 : 많은 사람이 함께 개발하는 소셜 코딩 사이트 GitHub을 이용하는 것으로, 
			   유능한 개발자들의 정제된 코드를 살펴볼 수 있다.
=====================================================================

