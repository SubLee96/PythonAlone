PythonAlone

05. 함수
'구문 오류(syntax error)와 실행 후에 발생하는 '예외(exception)'로 구분할 수 있다.'

: 구문 오류와 예외를 구분한다.
: 예외 처리하는 방법을 이해한다.
: 예외를 강제로 발생시키는 방법과 이해한다.

06-1 구문 오류와 예외(2)
> 일반적으로 프로그램이 예상치 못한 상황이 발생했을 경우, 어떻게 수행할지 몰라 죽어버린다.

# try except 구문
: 초기에는 조건문만으로 예외를 처리했다. : 구조적인 문제로 인해 조건문만으로 예외를 처리할 수 없는 상황이 발생했다.

[  try:
		예외가 발생할 가능성이 있는 코드
   except:
		예외가 발생했을 때 실행할 코드
								]

> try except 구문
---------------------------------------------------------------------------
# try catch 구문으로 예외를 처리한다.
try:
    # 숫자로 변환한다.
    number_input_a = int(input("정수 입력> "))
    # 출력한다.
    print("원의 반지름:", number_input_a)
    print("원의 둘레:", 2 * 3.14 * number_input_a)
    print("원의 넓이:", 3.14 * number_input_a * number_input_a)
except:
    print("무언가 잘못되었습니다.")

정수 입력> yes!!
무언가 잘못되었습니다.
---------------------------------------------------------------------------

= try except 구문과 pass 키워드 조합하기
: 해당 코드가 딱히 중요한 부분이 아니라면 일단 프로그램이 강제 종료되는 것부터 막자는 목적으로 except 구문에
  아무것도 넣지 않고 try 구문을 사용하게 된다.

[  try:
		예외가 발생할 가능성이 있는 코드
   except:
		pass
									]

> 숫자로 변환되는 것들만 리스트에 넣기
---------------------------------------------------------------------------
# 변수를 선언한다.
list_input_a = ["52", "273", "32", "스파이", "103"]

# 반복을 적용한다.
list_number = []
for item in list_input_a:
    # 숫자로 변환해서 리스트에 추가한다.
    try:
        float(item) # 예외가 발생하면 알아서 다음으로 진행은 안 되겠지?
        list_number.append(item) # 예외 없이 통과했으면 리스트에 넣어줘!
    except:
        pass

# 출력한다.
print("{} 내부에 있는 숫자는".format(list_input_a))
print("{}입니다.".format(list_number))

['52', '273', '32', '스파이', '103'] 내부에 있는 숫자는
['52', '273', '32', '103']입니다.
---------------------------------------------------------------------------

# try except else 구문

[  try:
		예외가 발생할 가능성이 있는 코드
   except:
		예외가 발생했을 때 실행할 코드
   else:
		예외가 발생하지 않았을 때 실행할 코드
										]

: try except else 구문 : 예외가 발생할 가능성이 있는 코드만 try 구문 내부에 넣고 나머지를 else에 넣는다.

> try except else 구문
---------------------------------------------------------------------------
# try except else 구문으로 예외를 처리한다.
try:
    # 숫자로 변환한다.
    number_input_a = int(input("정수 입력> "))
except:
    print("정수를 입력하지 않았습니다.")
else:
    # 출력한다.
    print("원의 반지름:", number_input_a)
    print("원의 둘레:", 2 * 3.14 * number_input_a)
    print("원의 넓이:", 3.14 * number_input_a * number_input_a)

정수 입력> 7
원의 반지름: 7
원의 둘레: 43.96
원의 넓이: 153.86

정수 입력> yes!!
정수를 입력하지 않았습니다.
---------------------------------------------------------------------------

-> 다른 언어들은 예외 처리에 else 구문이 없다!!!
> 파이썬과 루비 정도만 있다.

# finally
: 예외 처리 구문에서 가장 마지막에 사용할 수 있는 구문 : 예외가 발생하지 않든 무조건 실행할 때 사용하는 코드
[  try:
		예외가 발생할 가능성이 있는 코드
   except:
		예외가 발생했을 때 실행할 코드
   else:
		예외가 발생하지 않았을 때 실행할 코드
   finally;
		무조건 실행할 코드
										]

> finally 구문
---------------------------------------------------------------------------
# try except else 구문으로 예외를 처리한다.
try:
    # 숫자로 변환한다.
    number_input_a = int(input("정수 입력> "))
        # 출력한다.
    print("원의 반지름:", number_input_a)
    print("원의 둘레:", 2 * 3.14 * number_input_a)
    print("원의 넓이:", 3.14 * number_input_a * number_input_a)
except:
    print("정수를 입력해달라고 했잖아요?!")
else:
    print("예외가 발생하지 않았습니다.")
finally:
    print("일단 프로그램이 어떻게든 끝났습니다.")

정수 입력> 273
원의 반지름: 273
원의 둘레: 1714.44
원의 넓이: 234021.06
예외가 발생하지 않았습니다.
일단 프로그램이 어떻게든 끝났습니다.

정수 입력> yes!!
정수를 입력해달라고 했잖아요?!
일단 프로그램이 어떻게든 끝났습니다.
---------------------------------------------------------------------------

= try, except, finally 구문의 조합
> 몇 가지 규칙들
- try 구문은 단독으로 사용할 수 없으며, 반드시 except 구문 또는 finally 구문과 함께 사용해야 한다.
- else 구문은 반드시 except 구문 뒤에 사용해야 한다.

> 조합
- try + except 구문 조합
- try + except + else 구문 조합
- try + except + finally 구문 조합
- try + except + else + finally 구문 조합
- try + finally 구문 조합

> try + else 구문 조합
---------------------------------------------------------------------------
# try except else 구문으로 예외를 처리한다.
try:
    # 숫자로 변환한다.
    number_input_a = int(input("정수 입력> "))
        # 출력한다.
    print("원의 반지름:", number_input_a)
    print("원의 둘레:", 2 * 3.14 * number_input_a)
    print("원의 넓이:", 3.14 * number_input_a * number_input_a)
else:
    print("프로그램이 정상적으로 종료되었습니다.")
---------------------------------------------------------------------------
: 구문 오류가 발생하게 된다.

[  SyntaxError: Invalid syntax  ]

= finally에 대한 오해
: 파일을 열고 있으면 해당 파일을 이동하거나 덮어 씌우거나 하는 것이 불가능해진다.
> open()되어 있으면 반드시 close()해줘야 한다.

> 파일이 제대로 닫혔는지 확인하기
---------------------------------------------------------------------------
# try except 구문을 사용한다.
try:
    # 파일을 연다.
    file = open("info.txt", "w")
    # 여러 가지 처리를 수행한다.
    # 파일을 닫는다.
    file.close()
except Exception as e:
    print(e)

print("# 파일이 제대로 닫혔는지 확인하기")
print("file.closed:", file.closed)

# 파일이 제대로 닫혔는지 확인하기
file.closed: True
---------------------------------------------------------------------------
: 프로그램이 항상 켜져 있는 프로그램이라면 문제가 생길 수 있다.

> 파일 처리 중간에 예외 발생
---------------------------------------------------------------------------
# try except 구문을 사용한다.
try:
    # 파일을 연다.
    file = open("info.txt", "w")
    # 여러 가지 처리를 수행한다.
    예외.발생해라()
    # 파일을 닫는다.
    file.close()
except Exception as e:
    print(e)

print("# 파일이 제대로 닫혔는지 확인하기")
print("file.closed:", file.closed)

name '예외' is not defined
# 파일이 제대로 닫혔는지 확인하기
file.closed: False
---------------------------------------------------------------------------
: 파일이 닫혀있지 않은 모습을 관찰할 수 있다.
-> finally를 통해 파일을 닫게 해야 한다.

> finallyt 구문 사용해 파일 닫기
---------------------------------------------------------------------------
# try except 구문을 사용한다.
try:
    # 파일을 연다.
    file = open("info.txt", "w")
    # 여러 가지 처리를 수행한다.
    예외.발생해라()
except Exception as e:
    print(e)
finally:
    # 파일을 닫는다.
    file.close()

print("# 파일이 제대로 닫혔는지 확인하기")
print("file.closed:", file.closed)

name '예외' is not defined
# 파일이 제대로 닫혔는지 확인하기
file.closed: True
---------------------------------------------------------------------------

> try except 구문 끝난 후 파일 닫기
---------------------------------------------------------------------------
# try except 구문을 사용한다.
try:
    # 파일은 연다.
    file = open("info.txt", "w")
    # 여러 가지 처리를 수행한다.
    예외.발생해라()
except Exception as e:
    print(e)

# 파일을 닫는다.
file.close()
print("# 파일이 제대로 닫혔는지 확인하기")
print("file.closed:", file.closed)

name '예외' is not defined
# 파일이 제대로 닫혔는지 확인하기
file.closed: True
---------------------------------------------------------------------------
: 그냥 try except 구문이 모두 끝난 후에 파일을 닫으면 아무 문제 없다.

-> 파일을 닫을 때, 무조건 finally 키워드를 작성할 필요가 없음을 나타내고 있다.

= try 구문 내부에서 return 키워드를 사용하는 경우
>> finally 구문은 반복문 또는 함수 내부에 있을 때 위력을 발휘한다!!!

> try 구문 내부에서 return 키워드를 사용하는 경우
---------------------------------------------------------------------------
# test()함수를 선언한다.
def test():
    print("test() 함수의 첫 줄입니다.")
    try:
        print("try 구문이 실행되었습니다.")
        return
        print("try 구문의 return 키워드 뒤입니다.")
    except:
        print("except 구문이 실행되었습니다.")
    else:
        print("else 구문이 실행되었습니다.")
    finally:
        print("finally 구문이 실행되었습니다.")
    print("test() 함수의 마지막 줄입니다.")

# test() 함수를 호출한다.
test()

test() 함수의 첫 줄입니다.
try 구문이 실행되었습니다.
finally 구문이 실행되었습니다.
---------------------------------------------------------------------------
: 함수 내부에서 파일 처리 코드가 깔끔하게 만들고 싶을 때, finally 구문을 활용하는 경우가 많다.
: try 구문에서 원할 때 return 키워드로 빠져나가도 파일이 무조건 닫히게 된다.

> finally 키워드 활용
---------------------------------------------------------------------------
# 함수를 선언한다.
def write_text_file(filename, text):
    # try except 구문을 사용한다.
    try:
        # 파일을 연다.
        file = open(filename, "w")
        # 여러 가지 처리를 수행한다.
        return
        # 파일에 텍스트를 입력한다.
        file.write(text)
    except Exception as e:
        print(e)
    finally:
        # 파일을 닫는다.
        file.close()

# 함수를 호출한다.
write_text_file("test.txt", "안녕하세요!")
---------------------------------------------------------------------------
: finally 구문에서 close()함수를 호출하도록 코드를 작성하면 깔끔해진다.

= 반복문과 함께 사용하는 경우
: finally 구문은 무조건 실행된다. 반복문에서 break로 빠져나갈 때도 마찬가지이다.

> 반복문과 함께 사용하는 경우
---------------------------------------------------------------------------
print("프로그램이 시작되었습니다.")

while True:
    try:
        print("try 구문이 실행되었습니다.")
        break
        print("try 구문의 break 키워드 뒤입니다.")
    except:
        print("except 구문이 실행되었습니다.")
    finally:
        print("finally 구문이 실행되었습니다.")
    print("while 반복문의 마지막 줄입니다.")
print("프로그램이 종료되었습니다.")

프로그램이 시작되었습니다.
try 구문이 실행되었습니다.
finally 구문이 실행되었습니다.
프로그램이 종료되었습니다.
---------------------------------------------------------------------------
: 코드를 실행하면 break 키워드로 try 구문 전체를 빠져나가도 finally 구문이 실행되는 모습을 볼 수 있다.

=====================================================================
# 4가지 키워드로 정리하는 핵심 포인트
- 구문 오류 : 프로그램의 문법적인 오류로 프로그램이 실행조차 되지 않게 만드는 오류
- 예외(런타임) : 프로그램 실행 중에 발생하는 오류로 try catch 구문 등으로 처리할 수 있다.
			  반대로 구문 오류는 실행 자체가 안 되므로 try catch 구문으로 처리할 수 없다.
- 기본 예외 처리 : 조건문 등을 사용해 예외를 처리하는 기본적인 방법
- try except 구문 : 예외 처리에 특화된 구문
=====================================================================

