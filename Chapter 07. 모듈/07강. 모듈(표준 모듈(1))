PythonAlone

07. 모듈

: 모듈의 기본적인 사용 방법을 이해한다.
: 파이썬의 표준 모듈에는 어떤 것이 있는지 알아본다.
: 파이썬 표준 문서를 활용해 모듈의 기능을 찾는 방법에 대해 이해한다.

07-1 표준 모듈

> 파이썬은 모듈(module)이라는 기능을 활용해 코드를 분리하고 공유한다.
> 모듈 : 여러 변수와 함수를 가지고 있는 집합체로 '표준 모듈'과 '외부 모듈'로 나뉜다.
- 표준 모듈 : 파이썬에 기본적으로 내장되어 있는 모듈
- 외부 모듈 : 다른 사람들이 만들어서 공개한 모듈

[  import 모듈 이름  ]

# 모듈 사용의 기본: math 모듈
: math 모듈 : 수학과 관련된 기능

[  import math  ]

>>> import math
>>> math.sin(1)    # 사인
0.8414709848078965
>>> math.cos(1)    # 코사인
0.5403023058681398
>>> math.tan(1)    # 탄젠트
1.5574077246549023
>>> 
>>> math.floor(2.5)    # 내림
2
>>> math.ceil(2.5)    # 올림
3

= 모듈 문서

> math 모듈의 함수
=====================================================================
변수 또는 함수		설명
sin(x)			사인값을 구한다.
cos(x)			코사인값을 구한다.
tan(x)			탄젠트값을 구한다.
log(x[, base])	로그값을 구한다.
ceil(x)			올림한다.
floor(x)		내림한다.
=====================================================================

-> 비주얼 스튜디오 코드의 자동 완성 기능으로 코드를 쭉 살펴보면 표로 정리한 것들보다 훨씬 더 많은 것들을 확인한다.

※ 단순히 이런 코드가 있다는 사실만 알면 된다.
> '파이썬 공식 문서'

=====================================================================
# 반올림 함수
: 데이트베이스 등에 데이터를 넣을 때 실수를 정수로 변환해야 하는 경우가 있다.(실수를 정수로 변환)
> floor()함수와 ceil()함수를 함께 사용한다!
-> round()함수

>>> round(1.5)
2
>>> round(2.5)
2
>>> round(3.5)
4
>>> round(4.5)
4

: 정수 부분이 홀수이면 올림이 되어 2와 4가 출력되고, 짝수이면 내림이 되어 2와 4가 된다.
=====================================================================
: 즉, round()함수는 단순한 반올림이 아니다!!!

= from 구문
: 한 번에 모든 함수를 묶을 수 있다.
[  from 모듈 이름 import 가져오고 싶은 변수 또는 함수  ]
> math를 붙이지 않아도 된다!

>>> from math import sin, cos, tan, floor, ceil
>>> sin(1)
0.8414709848078965
>>> cos(1)
0.5403023058681398
>>> tan(1)
1.5574077246549023
>>> floor(2.5)
2
>>> ceil(2.5)
3

=====================================================================
# 모두 가져오기
[  from math import *  ]
: 모든 것(*)을 가져오면 실벽자 이름에서 충돌이 발생할 수 있다.
=====================================================================

= as 구문
: 모듈을 가져올 때 이름 충돌이 발생하는 경우가 있을 수 있다.
> 모듈의 이름이 너무 길어서 짧게 줄여 사용하고 싶은 경우

[  import 모듈 as 사용하고 싶은 식별자  ]

>>> import math as m
>>> m.sin(1)
0.8414709848078965
>>> m.cos(1)
0.5403023058681398
>>> m.tan(1)
1.5574077246549023
>>> m.floor(2.5)
2
>>> m.ceil(2.5)
3

※ 모듈을 무작정 공부하기보다는 해당 분야를 공부하며 만나는 모듈들만 정리해도 괜찮다!!!

# random 모듈
: 랜덤한 값을 생성할 때 사용하는 모듈

[  import random  ]
: from구문 또는 as구문을 활용 가능하다.

> random 모듈
---------------------------------------------------------------------------
import random
print("# random 모듈")

# random(): 0.0 <= x < 1.0 사이의 float를 리턴한다.
print("- random():", random.random())

# uniform(min, max): 지정한 범위 사이의 float를 리턴한다.
print("- uniform(10, 20):", random.uniform(10, 20))

# randrange(): 지정한 범위의 int를 리턴한다.
# - randrange(max): 0부터 max 사이의 값을 리턴한다.
# - randrange(min, max): min부터 max 사이의 값을 리턴한다.
print("- randrange(10)", random.randrange(10))

# choice(list): 리스트 내부에 있는 요소를 랜덤하게 선택한다.
print("- choice([1, 2, 3, 4, 5]):", random.choice([1, 2, 3, 4, 5]))

# shuffle(list): 리스트의 요소들을 랜덤하게 섞는다.
print("- shuffle([1, 2, 3, 4, 5]):", random.shuffle([1, 2, 3, 4, 5]))

# sample(list, k=<숫자>): 리스트의 요소 중에 k개를 뽑는다.
print("- sample([1, 2, 3, 4, 5], k=2):", random.sample([1, 2, 3, 4, 5], k=2))

# random 모듈
- random(): 0.21630501443354422
- uniform(10, 20): 11.08507760441196
- randrange(10) 8
- choice([1, 2, 3, 4, 5]): 1
- shuffle([1, 2, 3, 4, 5]): None
- sample([1, 2, 3, 4, 5], k=2): [1, 5]

# random 모듈
- random(): 0.20389148292359027
- uniform(10, 20): 18.446647288375395
- randrange(10) 7
- choice([1, 2, 3, 4, 5]): 4
- shuffle([1, 2, 3, 4, 5]): None
- sample([1, 2, 3, 4, 5], k=2): [4, 1]
---------------------------------------------------------------------------
: 실행할 때마다 결괏값이 달라진다.

=====================================================================
# 모듈 파일 이름 작성 시 주의 사항
: 파이썬의 모듈은 단순한 파이썬 파일이다.
> import 구문은 가장 먼저 현재 폴더에서 import 뒤에 적어 놓은 파일을 찾는다.
찾으면 이를 모듈로 인식하고 읽어 들인다.
=====================================================================

# sys 모듈
: sys모듈 : 시스템과 관련된 정보를 가지고 있는 모듈

> sys 모듈
---------------------------------------------------------------------------
# 모듈을 읽어 들인다.
import sys

# 명령 매개변수를 출력한다.
print(sys.argv)
print("---")

# 컴퓨터 환경과 관련된 정보를 출력한다.
print("getwindowsversion:()", sys.getwindowsversion())
print("---")
print("copyright:", sys.copyright)
print("---")
print("version:", sys.version)

# 프로그램을 강제로 종료한다.
sys.exit()

['C:/Users/이윤섭/Desktop/python practice/7단원/7-1/module_sys.py']
---
getwindowsversion:() sys.getwindowsversion(major=10, minor=0, build=18362, platform=2, service_pack='')
---
copyright: Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
---
version: 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24)[MSC v.1916 32 bit (Intel)]
---------------------------------------------------------------------------




