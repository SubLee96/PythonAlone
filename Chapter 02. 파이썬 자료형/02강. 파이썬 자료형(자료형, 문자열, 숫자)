PythonAlone

02. 자료형
: 자료와 자료형의 의미 (O)
: 문자열을 생성하는 방법과 문자열에 적용할 수 있는 연산자 (O)
: 숫자를 생성하는 방법과 숫자에 적용할 수 있는 연산자 (O)
: 변수를 선언하고 변수에 값을 할당하는 방법 (X)

02-1 자료형과 문자열
: 자료(data) : 프로그램이 처리할 수 있는 모든 것

# 자료형과 기본 자료형
: 자료형(datatype) : 개발자들이 쉽게 사용할 수 있도록 기능과 역할에 따라서 자료를 구분한 종류
- 문자열(String): 메일 제목, 메시지 내용 등
- 숫자(number): 물건의 가격, 학생의 성적 등
- 불(boolean): 친구의 로그인 상태 등

= 자료를 알아야 하는 이유
> "자료 -> 큰 자료형 -> 거대한 프로그램"
: 자료가 가장 기본적인 단위이다.

= 자료형 확인하기
: 자료형(datatype) : 자료의 형식
> type()함수
: 식별자 뒤에 ()가 들어가면 함수로 취급된다.(함수의 괄호 내부에 자료를 넣으면 그 자료가 어떤 자료형인지 알 수 있다.)

---------------------------------------------------------------------------
>>> print(type("안녕하세요"))
<class 'str'>    # str : string(문자열)
>>> print(type(273))
<class 'int'>    # int : integer(정수)
---------------------------------------------------------------------------

# 문자열 만들기
: 문자열(String) : 프로그래밍 언어에서 글자들이 나열된 것

= 큰따옴표 문자열 만들기
: 큰따옴표(")로 감싸서 만든 것
>>> print("안녕하세요")
안녕하세요

= 작은따옴표 문자열 만들기
: 작은따옴표(')로 감싸서 만든다.
>>> print('안녕하세요')
안녕하세요

= 문자열 내부에 따옴표 넣기
: 큰따옴표와 작은따옴표를 지원하는 이유?
>>> print(""안녕하세요"라고 말했습니다.")
SyntaxError: invalid syntax
-> 오류(Error)가 발생한다.

> 파이썬에서는 따옴표를 연달아 작성한걸로 인식하게 된다.(단순 배열이 불가능하다.) : 구문 오류(Syntax Error)

>>> print('"안녕하세요"라고 말했습니다.')
"안녕하세요"라고 말했습니다.
>>> print("'배가 고픕니다.'라고 생각했습니다.")
'배가 고픕니다.'라고 생각했습니다.

=====================================================================
# 구문 오류(Syntax Error)
: 작성한 코드에 뭔가 문제가 있어서 아예 실행조차 되지 않는다는 의미
예) 괄호를 열고, 닫지 않을 경우
=====================================================================

= 이스케이프 문자를 사용해 문자열 만들기
"문자열을 여러 방법으로 만들면 복잡하다..."
> 문자열을 만들더라도 원하는 때에 큰따옴표와 작은따옴표를 쉽게 넣을 수 있는 방법
: "이스케이프 문자(escape character)" (역슬래시(\) 기호)
- \" : 큰따옴표를 의미
- \' : 작은따옴표를 의미

>>> print("\"안녕하세요\"라고 말했습니다.")
"안녕하세요"라고 말했습니다.
>>> print('\'배고픕니다.\'라고 생각했습니다.')
'배고픕니다.'라고 생각했습니다.

- \n : 줄바꿈을 의미
- \t : 탭을 의미

>>> print("안녕하세요\n안녕하세요")
안녕하세요
안녕하세요
>>> print("안녕하세요\t안녕하세요")
안녕하세요	안녕하세요

---------------------------------------------------------------------------
>>> print("이윤섭\t25\t남동구")
>>> print("이재희\t23\t남동구")
>>> print("구름\t3\t강남")
이윤섭	25	남동구
이재희	23	남동구
구름	3	강남
---------------------------------------------------------------------------

- \\: 역슬래시(\)를 의미

>>> print("\\ \\ \\ \\")
\ \ \ \

= 여러 줄 문자열 만들기
: 이스케이프 문자 중에 \n을 사용하면 줄바꿈이 가능하다.
>>> print("동해물과 백두산이 마르고 닳도록\n하느님이 보우하사 우리나라 만세\n무궁화 삼천리 화려강산\n대한으로 길이 보전하세")
동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산
대한으로 길이 보전하세

이런 경우, 큰따옴표 세개(""")를 사용하면 편리하다.

>>> print("""
동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산 대한사람
대한으로 길이 보전하세
""")

동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산 대한사람
대한으로 길이 보전하세

= 줄바꿈 없이 문자열 만들기
위와 같이 진행하는 경우, 위 아래로 의도하지 않은 줄바꿈이 들어가게 된다.
>>> print("""\
동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산 대한사람
대한으로 우리나라 만세\
""")
동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산 대한사람
대한으로 우리나라 만세

> \ 기호는 여러 줄 문자열을 사용할 때뿐만 아니라 다양한 상황에 활용되는 기호이다!!!

# 문자열 연산자
: 일반적으로 '숫자'라는 자료에는 더하기, 빼기, 곱하기, 나누기

= 문자열 연결 연산자: +
[  "문자열" + "문자열"  ]

> 파이썬의 경우, '숫자 더하기 연산자'와 '문자 더하기 연산자'는 같은 기호로 사용되지만 내부적으로 완전히 다른 수행을 한다.
=====================================================================
# 프로그래밍 언어마다 다른 문자열 연결 연산자
: Perl, PHP 등의 일부는 숫자 더하기 연산자와 문자열 연결 연산자의 모양이
같아 헷갈린다고 하여 문자열 끝에 마침표(.)를 찍는 경우도 있다.
=====================================================================

>>> print("안녕" + "하세요")
안녕하세요
>>> print("안녕하세요" + "!")
안녕하세요!

>>> print("안녕하세요" + 1)
Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    print("안녕하세요" + 1)
TypeError: can only concatenate str (not "int") to str
> 문자열과 숫자에 동시에 더하기 연산자를 사용할 수 없다.

= 문자열 반복 연산자: *
[  문자열 * n  ]

>>> print("안녕하세요" * 3)
안녕하세요안녕하세요안녕하세요
>>> print(3 * "안녕하세요")
안녕하세요안녕하세요안녕하세요

= 문자열 선택 연산자(인덱싱): []
: 문자열 내부의 문자 하나를 선택하는 연산자
> 인덱스(index) : 대괄호 안에 선택할 문자의 위치를 지정한다.

- 인덱스의 유형: 두 가지
1) 0부터 세는 '제도 인덱스(zero index)' : 파이썬이 사용하는 유형 
2) 1부터 세는 '원 인덱스(one index)'

print("문자 선택 연산자에 대해 알아볼까요?")
print("안녕하세요"[0])
print("안녕하세요"[1])
print("안녕하세요"[2])
print("안녕하세요"[3])
print("안녕하세요"[4])

문자 선택 연산자에 대해 알아볼까요?
안
녕
하
세
요

print("문자를 뒤에서부터 선택해 볼까요?")
print("안녕하세요"[-1])
print("안녕하세요"[-2])
print("안녕하세요"[-3])
print("안녕하세요"[-4])
print("안녕하세요"[-5])

문자를 뒤에서부터 선택해 볼까요?
요
세
하
녕
안

= 문자열 범위 선택 연산자(슬라이싱): [:]
: 문자열의 특정 범위를 선택할 때 사용하는 연산자

>>> print("안녕하세요"[1:4])
녕하세

- 슬라이싱의 유형: 두 가지
1) 마지막 숫자를 포함
2) 마지막 숫자를 미포함 : 파이썬은 이 유형을 사용한다.

>>> print("안녕하세요"[0:2])
안녕
>>> print("안녕하세요"[1:3])
녕하
>>> print("안녕하세요"[2:4])
하세

- 뒤의 값을 생략할 경우: 자동으로 가장 최대 위치(마지막 글자)까지 예) [1:]
- 앞의 값을 생략할 경우: 가장 앞쪽으로 위치(첫 번째 글자)까지 예) [:3]

>>> print("안녕하세요"[1:])
녕하세요
>>> print("안녕하세요"[:3])
안녕하

=====================================================================
- 인덱싱(indexing): []기호를 사용, 문자열의 특정 위치에 있는 문자를 참조
- 슬라이싱(slicing): [:]기호를 사용, 문자열의 일부를 추출
=====================================================================

※ 문자열 선택 연산자로 슬라이스를 하더라도 원본은 변하지 않는다.

>>> hello = "안녕하세요"
>>> print(hello[0:2])
안녕
>>> hello
'안녕하세요'

1) "안녕하세요"라는 문자열을 hello라는 저장 공간(변수)에 저장한다.
2) hello에 있는 문자열 중 0, 1번째 문자열을 추출해 출력한다.
3) hello를 입력해 hello라는 저장 공간(변수)에 들어 있는 값을 출력한다.
-> 슬라이싱이라는 처리를 해도 원본은 그대로 남아 있는 것을 확인할 수 있다.

= IndexError(index out of range) 예외
: IndexError는 프로그래밍 중에 가장 흔히 볼 수 있는 예외이다.
> 리스트/문자열의 수를 넘는 요소/글자를 선택할 경우에 발생한다.

>>> print("안녕하세요"[10])
Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    print("안녕하세요"[10])
IndexError: string index out of range

: <pyshell#17> -> 이 내용은 파이썬 IDLE 에디터에서 실행했을 때 나타나는 내용으로 에디터마다 다르게 나온다.
: IndexError: string index out of range : IndexError 예외가 발생했다.

=> '리스트/문자열의 수를 넘는 부분을 선택했구나'라고 인지하면 된다!!!

# 문자열의 길이 구하기
: len()함수 사용 : 문자열에 들어있는 문자의 개수(문자열의 길이)를 세어준다.

>>> print(len("안녕하세요"))
5


02-2 숫자
: 정수형(소수점이 없는 숫자), 실수형(소수점이 있는 숫자)
> 부동소수점(소수점이 움직이는 숫자)

# 숫자의 종류

>>> print(273)
273
>>> print(52.273)
52.273

>>> print(type(52))
<class 'int'>    
>>> print(type(52.273))
<class 'float'>     

- int = integer
- float = floating point(부동 소수점(실수))

>>> print(0)
0
>>> print(type(0))
<class 'int'>
>>> print(0.0)
0.0
>>> print(type(0.0))
<class 'float'>

※ 문자열 선택 연산자([]) 등을 사용할 경우, 괄호 안에 넣는 숫자가 정수가 아니라 부동소수점인 경우에 오류가
  발생할 수도 있다!!!
  
=====================================================================
# 파이썬에서의 지수 표현
>>> 0.52273e2
52.273
>>> 0.52273e-2
0.0052273
=====================================================================

# 숫자 연산자
: 일상생활에서 적용하는 연산자들이 존재한다.

= 사칙 연산자: +, -, *, /
: 덧셈, 뺄셈, 곱셈, 나눗셈 등이 있다.
=====================================================================
연산자	설명			구문
+		덧셈 연산자	숫자+숫자		
-		뺄셈 연산자	숫자-숫자	
*		곱셈 연산자	숫자*숫자
/		나눗셈 연산자	숫자/숫자
=====================================================================

>>> print("5 + 7 =", 5 + 7)
5 + 7 = 12
>>> print("5 - 7 =", 5 - 7)
5 - 7 = -2
>>> print("5 * 7 =", 5 * 7)
5 * 7 = 35
>>> print("5 / 7 =", 5 / 7)
5 / 7 = 0.7142857142857143

= 정수 나누기 연산자: //
: 숫자를 나누고 소수점 이하의 자릿수를 떼버린 후, 정수 부분만 남기는 '정수 나누기 연산자'

>>> print("3 / 2 =", 3 / 2)
3 / 2 = 1.5
>>> print("3 // 2 =", 3 // 2)
3 // 2 = 1

> '// 연산자'는 몫만 출력되는 연산자이다.

= 나머지 연산자: %
: A를 B로 나누었을 경우, 남은 나머지 값을 반환하는 연산자이다.

>>> print("5 % 2 =", 5 % 2)
5 % 2 = 1

= 제곱 연산자: **

print("2 ** 1 =", 2 ** 1)
print("2 ** 2 =", 2 ** 2)
print("2 ** 3 =", 2 ** 3)
print("2 ** 4 =", 2 ** 4)

2 ** 1 = 2
2 ** 2 = 4
2 ** 3 = 8
2 ** 4 = 16

= 연산자의 우순선위
: 연산자 사이에는 우리가 일반적으로 배우는 연산자의 규칙으로 연산자의 우선순위가 정해져있다.
(문자열도 우선순위를 갖는다.)

# TypeError 예외
: 서로 다른 자료를 연산하는 경우

>>> string = "문자열"
>>> number = 273
>>> string + number
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    string + number
TypeError: can only concatenate str (not "int") to str = TypeError 예외가 발생했다.

> 문자열과 숫자는 연산을 할 수 없다!

