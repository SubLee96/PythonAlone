PythonAlone

02. 자료형
: 자료와 자료형의 의미 (O)
: 문자열을 생성하는 방법과 문자열에 적용할 수 있는 연산자 (O)
: 숫자를 생성하는 방법과 숫자에 적용할 수 있는 연산자 (O)
: 변수를 선언하고 변수에 값을 할당하는 방법 (O)

02-4 숫자와 문자열의 다양한 기능
: 함수(function) : format(), upper(), lower(), strip(), find(), in 연산자, split()

> 문자열 뒤에 마침표(.)를 찍으면 자동 완성 기능이 제공된다.

# 문자열의 format() 함수
: format() 함수 : 문자열 함수로써 중괄호{}를 포함한 문자열 뒤에 마침표(.)를 찍고 format()함수를 사용하면
  중괄호의 개수와 format함수 괄호 안 매개변수의 개수가 같아야 한다.
  
"{}".format(10)
"{}{}".format(10, 20)
"{}{}{}{}{}".format(101, 202, 303, 404, 505)

: 차례로 대치되면서 숫자가 문자열이 된다.

---------------------------------------------------------------------------
# format()함수로 숫자를 문자열로 변환하기
string_a = "{}".format(10)

# 출력하기
print(string_a)
print(type(string_a))

10
<class 'str'>
---------------------------------------------------------------------------

---------------------------------------------------------------------------
# format() 함수로 숫자를 문자열로 변환하기
format_a = "{}만 원".format(5000)
format_b = "파이썬 열공하여 첫 연봉 {}만 원 만들기".format(5000)
format_c = "{} {} {}".format(3000, 4000, 5000)
format_d = "{} {} {}".format(1, "문자열", True)

# 출력하기
print(format_a)    # 다른 문자열을 넣는 형태
print(format_b)    # 기호의 앞뒤로 다른 문자열을 넣은 형태
print(format_c)    # 매개변수를 여러 개 넣은 형태
print(format_d)    # 숫자 이외의 자료형에도 적용할 수 있다는 사실을 보임

5000만 원
파이썬 열공하여 첫 연봉 5000만 원 만들기
3000 4000 5000
1 문자열 True
---------------------------------------------------------------------------

# IndexError 예외
: {} 기호의 개수가 format()함수의 매개변수 개수보다 많으면 IndexError 예외가 발생한다.

>>> "{} {}".format(1, 2, 3, 4, 5)
'1 2'
>>> "{} {} {}".format(1, 2)
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    "{} {} {}".format(1, 2)
IndexError: Replacement index 2 out of range for positional args tuple
> {}가 매개변수보다 많은 경우로 IndexError라는 예외가 발생한다.

# format()함수의 다양한 기능

= 정수 출력의 다양한 형태
> 정수를 특정 칸에 출력하기
---------------------------------------------------------------------------
# 정수
output_a = "{:d}".format(52)

# 특정 칸에 출력하기
output_b = "{:5d}".format(52)    # 5칸을 잡고 작성한다.
output_c = "{:10d}".format(52)    # 10칸을 잡고 작성한다.

# 빈칸을 0으로 채우기
output_d = "{:05d}".format(52)    # 양수
output_e = "{:05d}".format(-52)    # 음수

print("# 기본")
print(output_a)
print("# 특정 칸에 출력하기")
print(output_b)
print(output_c)
print("# 빈칸을 0으로 채우기")
print(output_d)
print(output_e)

# 기본
52
# 특정 칸에 출력하기
   52
        52
# 빈칸을 0으로 채우기
00052
-0052
---------------------------------------------------------------------------

> 기호 붙여 출력하기
---------------------------------------------------------------------------
# 기호와 함께 출력하기
output_f = "{:+d}".format(52)    # 양수
output_g = "{:+d}".format(-52)    # 음수
output_h = "{: d}".format(52)    # 양수: 기호 부분 공백
output_i = "{: d}".format(-52)    # 음수: 기호 부분 공백

print("# 기호와 함께 출력하기")
print(output_f)
print(output_g)
print(output_h)
print(output_i)

# 기호와 함께 출력하기
+52
-52
 52
-52
---------------------------------------------------------------------------

> 조합해 보기
---------------------------------------------------------------------------
# 조합하기
output_h = "{:+5d}".format(52)    # 기호를 뒤로 밀기: 양수
output_i = "{:+5d}".format(-52)    # 기호를 뒤로 밀기: 음수
output_j = "{:=+5d}".format(52)    # 기호를 앞으로 밀기: 양수
output_k = "{:=+5d}".format(-52)    # 기호를 앞으로 밀기: 음수
output_l = "{:+05d}".format(52)    # 0으로 채우기: 양수
output_m = "{:+05d}".format(-52)    # 0으로 채우기: 음수

print("# 조합하기")
print(output_h)
print(output_i)
print(output_j)
print(output_k)
print(output_l)
print(output_m)

# 조합하기
  +52
  -52
+  52
-  52
+0052
-0052

: 기호와 공백을 조합할 때 =기호를 사용하여 앞 혹은 뒤에 설정할 수 있다.
---------------------------------------------------------------------------

= 부동 소수점 출력의 다양한 형태
> float 자료형 기본
---------------------------------------------------------------------------
output_a = "{:f}".format(52.273)
output_b = "{:15f}".format(52.273)    # 15칸 만들기
output_c = "{:+15f}".format(52.273)    # 15칸에 부로 추가하기
output_d = "{:+015f}".format(52.273)    # 15칸에 부호 추가하고 0으로 채우기
output_e = "{:=+15f}".format(52.273)

print(output_a)
print(output_b)
print(output_c)
print(output_d)
print(output_e)

52.273000
      52.273000
     +52.273000
+0000052.273000
+     52.273000

: 부동 소수점의 경우, 소수점 아래 자릿수를 지정하는 기능이 있다.
---------------------------------------------------------------------------

> 소수점 아래 자릿수 지정하기
---------------------------------------------------------------------------
output_a = "{:15.3f}".format(52.273)
output_b = "{:15.2f}".format(52.273)    
output_c = "{:15.1f}".format(52.273)    

print(output_a)
print(output_b)
print(output_c)

         52.273
          52.27
           52.3
		   
: 15칸을 잡고 소수점을 3자리, 2자리, 1자리로 출력한다. (반올림 자동적으로 진행)
---------------------------------------------------------------------------

= 의미 없는 소수점 제거하기
: 파이썬은 내부적으로 0과 0.0을 서로 다른 값으로 출력한다.
: 0을 제거하고 싶을 경우에 {:g}를 사용한다.

> 의미 없는 소수점 제거하기
---------------------------------------------------------------------------
output_a = 52.0
output_b = "{:g}".format(output_a)  
print(output_a)
print(output_b)

52.0
52
---------------------------------------------------------------------------

# 대소문자 바꾸기: upper()와 lower()
- upper()함수 : 문자열의 알파벳을 대문자로,
- lower()함수 : 문자열의 알파벳을 소문자로 만든다.

>>> a = "Hello Python Programming...!"
>>> a.upper()
'HELLO PYTHON PROGRAMMING...!'
>>> a.lower()
'hello python programming...!'

=====================================================================
# 파괴적 함수와 비파괴적 함수
- 비파괴적 함수 : upper()함수와 lower()함수를 사용하면 a의 문자열이 바뀔 것으로 생각하는데, "절대로"
  원본은 변하지 않는다. 
(파괴적 함수는 4장에서!!!)
=====================================================================

# 문자열 양옆의 공백 제거하기: strip()
: strip()함수 : 문자열 양옆의 공백을 제거한다.
- lstrip()함수 : 왼쪽의 공백을 제거하는 함수
- rstrip()함수 : 오른족의 공백을 제거하는 함수
  (공백이란 '띄어쓰기', '탭', '줄바꿈'을 모두 포함한다.)

>>> input_a = """
	안녕하세요
문자열의 함수를 알아봅니다.
"""
>>> print(input_a)

	안녕하세요
문자열의 함수를 알아봅니다.

>>> print(input_a.strip())
안녕하세요
문자열의 함수를 알아봅니다.

: 공백이 모두 제거되는 모습을 볼 수 있다. 이 기능을 "trim"이라 칭한다.

※ lstrip()함수와 rstrip()함수는 일반적으로 사용하지 않는다.

# 문자열의 구성 파악하기: isOO()
: is로 시작하는 함수 : 문자열이 소문자로만 구성되어 있는지? 알파벳으로만 구성되어 있는지? 숫자로만 구성되어 있는지? 등
- isalnum(): 문자열이 알파벳 또는 숫자로만 구성되어 있는지 확인
- isalpha(): 문자열이 알파벳으로만 구성되어 있는지 확인
- isidentifier(): 문자열이 식별자로 사용할 수 있는 것인지 확인
- isdigit(): 문자열이 숫자로 인식될 수 있는 것인지 확인
- isspace(): 문자열이 공백으로만 구성되어 있는지 확인
- islower(): 문자열이 소문자로만 구성되어 있는지 확인
- isupper(): 문자열이 대문자로만 구성되어 있는지 확인

: Bool()함수 : Ture인지 False인지를 출력해주는 함수

>>> print("TrainA10".isalnum())
True
>>> print("10".isdigit())
True

# 문자열 찾기: find()와 rfind()
- find(): 왼쪽부터 찾아서 처음 등장하는 위치를 찾는다.
- rfind(): 오른쪽부터 찾아서 처음 등장하는 위치를 찾는다.

>>> output_a = "안녕안녕하세요".find("안녕")
>>> print(output_a)
0
>>> output_b = "안녕안녕하세요".rfind("안녕")
>>> print(output_b)
2

- 처음 "안녕"은 0번째에 있는 것 / 두 번째 "안녕"은 2번째부터 등장하는 것

# 문자열과 in 연산자
: in 연산자 : 문자열 내부에 어떤 문자열이 있는지 확인 (True 또는 False로 결과가 나온다.)

>>> print("안녕" in "안녕하세요")
True
>>> print("잘자" in "안녕하세요")
False

# 문자열 자르기: split
: split()함수 : 괄호 안의 문자열인 공백(띄어쓰기)을 기준으로 자른다.

>>> a = "10 20 30 40 50".split(" ")
>>> print(a)
['10', '20', '30', '40', '50']

-> 실행결과로 리스트(list)가 나온다.

=====================================================================
# 7가지 키워드로 정리하는 핵심 포인트
- format()함수 : 숫자와 문자열을 다양한 형태로 출력 가능
- upper()와 lower()함수 : 문자열의 알파벳을 대문자로 혹은 소문자로 변경
- strip()함수 : 문자열 양옆의 공백을 제거
- find()함수 : 문자열 내부에 특정 문자가 어디에 위치하는지 찾을 때 사용
- in 연산자 : 문자열 내부에 어떤 문자열이 있는지 확인할 때 사용
- split()함수 : 문자열을 특정한 문자로 자를 때 사용
=====================================================================

