PythonAlone

02. 자료형
: 자료와 자료형의 의미 (O)
: 문자열을 생성하는 방법과 문자열에 적용할 수 있는 연산자 (O)
: 숫자를 생성하는 방법과 숫자에 적용할 수 있는 연산자 (O)
: 변수를 선언하고 변수에 값을 할당하는 방법 (O)

02-3 변수와 입력
: 변수 : 변할 수 있는 수 / 값을 저장할 때 사용하는 식별자

# 변수 만들기 / 사용하기
>>> pi = 3.14159265
>>> pi
3.14159265

1. 변수를 선언하는 방법
: 변수를 생성하는 것

2. 변수에 값을 할당하는 방법
: 변수에 값을 넣는 것
"우변을 좌변에 대입한다는 의미"

3. 변수를 참조하는 방법
: 변수 참조 : 변수 안에 있는 값을 사용하는 것

> 변수를 사용하기 위해서 변수를 선언해주고, 변수 리음을 적어주면 그 자체로 사용하겠다고 선언한다.
[  변수 = 값  ]

- 변수에 저장된 값을 출력한다.
[  변수  ]
- 변수에 저장된 값으로 연산한다.
[  변수 + 변수  ]
- 변수에 저장된 값을 출력한다.
[  print(변수)  ]

>>> pi = 3.14159265
>>> pi + 2
5.14159265
>>> pi - 2
1.1415926500000002
>>> pi * 2
6.2831853
>>> pi / 2
1.570796325
>>> pi % 2
1.1415926500000002
>>> pi * pi
9.869604378534024

[  pi + "문자열"  ]은 불가능하다.

---------------------------------------------------------------------------
# 변수 선언과 할당
pi = 3.14159265
r = 10

# 변수 참조
print("원주율 =", pi)
print("반지름 =", r)
print("원의 둘레 =", 2*pi*r)    # 원의 둘레
print("원의 넓이 =", pi*r*r)    # 원의 넓이

원주율 = 3.14159265
반지름 = 10
원의 둘레 = 62.831853
원의 넓이 = 314.159265
---------------------------------------------------------------------------

※※※※※※
=====================================================================
# 파이썬의 유연성
[자바, C언어의 경우] : 변수 pi를 사용하기 위해서 변수에 저장할 자료형을 선언한다.
int pi    
[파이썬의 경우] : 변수에 자료형을 지정하지 않는다.
a = "문자열"
a = True
a = 10
-> 유연성이 좋다고 할 수 있다. / 오히려 TypeError가 발생하는 경우도 있으니 주의하자!
=> "하나의 변수에는 되도록 하나의 자료형을 넣어 활용하는 것이 좋다!"
=====================================================================

# 복합 대입 연산자
: 변수는 내부에 들어 있는 자료의 연산자를 사용한다.
> 변수를 활용하면 기존의 연산자와 조합해서 사용할 수 있는 연산자

[  a += 10  ]
[  a = a + 10  ]

> 숫자 복합 대입 연산자
=====================================================================
연산자 이름    설명
+=          숫자 덧셈 후 대입
-=          숫자 뺄셈 후 대입
*=          숫자 곱셈 후 대입
/=          숫자 나눗셈 후 대입
%=          숫자의 나머지를 구한 후 대입
**=         숫자 제곱 후 대입
=====================================================================

>>> number = 100
>>> number += 10
>>> number += 20
>>> number += 30
>>> print("number:", number)
number: 160

> 문자열 복합 대입 연산자
=====================================================================
>>> string = "안녕하세요"
>>> string += "!"
>>> string += "!"
>>> print("string:", string)
string: 안녕하세요!!
=====================================================================

# 사용자 입력: print()
: input()함수 : 명령 프롬프트에서 사용자로부터 데이터를 입력받을 때 사용한다.

= input()함수로 사용자 입력받기
: 프롬프트 문자열 : input 함수 괄호 안에 입력한 내용
>>> input("인사말을 입력하세요.")

: 블록(block) : 프로그램이 실행 도중에 잠시 멈추는 것
인사말을 입력하세요> |   -> 입력 대기를 알려주는 커서로 프로그램에 따라 모양이 다를 수 있다.

인사말을 입력하세요> 안녕하세요 Enter
'안녕하세요'

>>> string = input("인사말을 입력하세요> ")
인사말을 입력하세요> 안녕하세요 Enter
>>> print(string)
안녕하세요

= input() 함수의 입력 자료형
: 대입한 값의 자료형이 어떻게 되는지?
>>> print(type(string))
<class 'str'>

>>> number = input("숫자를 입력하세요> ")
숫자를 입력하세요> 12345
>>> print(number)
12345
>>> print(type(number))
<class 'str'>

---------------------------------------------------------------------------
# 입력을 받습니다.
string = input("입력> ")

# 출력합니다.
print("자료:", string)
print("자료형:", type(string))

실행결과1
입력> 52273
자료: 52273
자료형: <class 'str'>

실행결과2
입력> True
자료: True
자료형: <class 'str'>
---------------------------------------------------------------------------

---------------------------------------------------------------------------
# 입력을 받습니다.
string = input("입력> ")

# 출력합니다.
print("입력 + 100:", string + 100)

입력> 300
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/input_error.py", line 5, in <module>
    print("입력 + 100:", string + 100)
TypeError: can only concatenate str (not "int") to str
: 입력받는 문자열을 숫자로 변환해야 숫자 연산에 활용할 수 있다는 메시지
---------------------------------------------------------------------------

# 문자열을 숫자로 바꾸기
: 캐스트(cast) : iput()함수의 입력 자료형은 항상 문자열이기 때문에 입력받은 문자열을 숫자로 변환해야 숫자 연산에 활용할 수 있다.
- int()함수: 문자열을 int 자료형을 변환한다.
- float()함수: 문자열을 float 자료형으로 변환한다.

---------------------------------------------------------------------------
string_a = input("입력A> ")
int_a = int(string_a)

string_b = input("입력B> ")
int_b = int(string_b)

print("문자열 자료:", string_a + string_b)
print("숫자 자료:", int_a + int_b)

입력A> 273 Enter
입력B> 52 Enter
문자열 자료: 27352    # 문자열을 연결해준다.
숫자 자료: 325    # 정수로 변환한 다음 더해준다.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
output_a = int("52")
output_b = float("52.273")

print(type(output_a), output_a)
print(type(output_b), output_b)

<class 'int'> 52
<class 'float'> 52.273
---------------------------------------------------------------------------

---------------------------------------------------------------------------
input_a = float(input("첫 번째 숫자> "))
input_b = float(input("두 번째 숫자> "))

print("덧셈 결과:", input_a + input_b)
print("뺄셈 결과:", input_a - input_b)
print("곱셈 결과:", input_a * input_b)
print("나눗셈 결과:", input_a / input_b)

첫 번째 숫자> 273
두 번째 숫자> 52
덧셈 결과: 325.0
뺄셈 결과: 221.0
곱셈 결과: 14196.0
나눗셈 결과: 5.25
---------------------------------------------------------------------------

# ValueError 예외
: ValueError 예외 : 자료형을 변환할 때, '변환할 수 없는 것'을 변환하려할 때 발생

1. 숫자가 아닌 것을 숫자로 변환하려고 할 때
int("안녕하세요")
float("안녕하세요")

Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    int("안녕하세요")
ValueError: invalid literal for int() with base 10: '안녕하세요'

2. 소수점이 있는 숫자 형식의 문자열을 int()함수로 변환하려고 할 때
int("52.273")
> 부동 소수점이 있어서 에러가 발생한다.

=> int()함수는 부동 소수점 자료형을 정수로 변환하지 못하여 에러가 발생한다.

# 숫자를 문자열로 바꾸기
: 숫자를 문자열로 바꾸는 것도 가능하다.

str()함수는 문자열로 변환해준다.
---------------------------------------------------------------------------
output_a = str(52)
output_b = str(52.273)
print(type(output_a), output_a)
print(type(output_b), output_b)

<class 'str'> 52
<class 'str'> 52.273
---------------------------------------------------------------------------

=====================================================================
# 7가지 키워드
- 변수 선언 : 변수를 생성하는 것을 의미한다.
- 변수 할당 : 변수에 값을 넣는 것을 의미한다.
- input()함수 : 명령 프롬프트에서 사용자로부터 데이터를 입력받을 때 사용한다.
- int()함수 : 문자열을 int 자료형으로 변환한다.
- float()함수 : 문자열을 float 자료형으로 변환한다.
- str()함수 : 숫자를 문자열로 변환한다.
=====================================================================

