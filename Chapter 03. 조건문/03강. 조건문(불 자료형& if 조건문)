PythonAlone

03. 조건문
: 불에 대해 이해한다.
: if 조건문의 기본적인 사용 방법을 알아본다.
: 현실의 조건과 프로그래밍에서의 조건에 차이를 이해한다.

> 불리언(boolean) : 프로그래밍 언어에는 기본적인 자료형으로 참과 거짓을 나타내는 값이 있다.
> Boolean : 불린 / 불리언 / 불

# 불 만들기: 비교 연산자
=====================================================================
연산자   설명     연산자		설명
==     같다		>		크다
!=     다르다		<=		작거나 같다
<      작다		>=		크거나 같다
=====================================================================

>>> print(10 == 100)
False
>>> print(10 != 100)
True
>>> print(10 < 100)
True
>>> print(10 > 100)
False
>>> print(10 <= 100)
True
>>> print(10 >= 100)
False

조건식		의미						결과
10 == 100	10과 100은 같다			거짓
10 != 100	10과 100은 다르다			참
10 < 100	10은 100보다 작다			참
10 > 100	10은 100보다 크다			거짓
10 <= 100	10은 100보다 작거나 같다		참
10 >= 100	10은 100보다 크거나 같다		거짓

>>> print("가방" == "가방")
True
>>> print("가방" != "하마")
True
>>> print("가방" < "하마")
True
>>> print("가방" > "하마")
False

=====================================================================
>>> x = 25
>>> print(10 < x < 30)
True
>>> print(40 < x < 60)
False
=====================================================================

# 불 연산하기: 논리 연산자
: 불끼리 사용할 수 있는 '논리 연산자'

=====================================================================
연산자	의미		설명
not		아니다	불을 반대로 전환한다.
and		그리고	피연산자 두 개가 모두 참일 때 True를 출력하고, 그 외는 False를 출력
or		또는		피연산자 두 개 중에 하나만 참이라도 True 출력하며, 두 개가 모두 거짓일
				경우에만 False 출력
=====================================================================

=====================================================================
# 단항 연산자와 이항 연산자
- 단항 연산자 : 피연산자가 한 개 	예) -, +
- 이항 연산자 : 피연산자 두 개 	예) A + B, A - B, A * B
=====================================================================

= not 연산자
: 단항 연산자 / 참과 거짓을 반대로 바꿀 때 사용한다.
>>> print(not True)
False
>>> print(not False)
True

> not 연산자 조합하기
---------------------------------------------------------------------------
x = 10
under_20 = x < 20
print("under_20:", under_20)
print("not under_20:", not under_20)

under_20: True
not under_20: False
---------------------------------------------------------------------------

= and 연산자와 or 연산자

- and 연산자
=====================================================================
좌변		우변		결과
True	True	True
True	False	False
False	True	False
False	False	False
=====================================================================

- or 연산자
=====================================================================
좌변		우변		결과
True	True	True
True	False	True
False	True	True
False	False	False
=====================================================================

>>> print(True and True)
True
>>> print(True and False)
False
>>> print(False and True)
False
>>> print(False and False)
False
>>> print(True or True)
True
>>> print(True or False)
True
>>> print(False or True)
True
>>> print(False or False)
False

# 논리 연산자의 활용

= and 연산자
예) '티켓 1장 이하' AND '오후 3시 이후' = '티켓 구매 가능'

= or 연산자
예) '우리카드' OR '신한카드' = 'D.C 10% 할인'

# if 조건문이란?
: 조건에 따라 코드를 실행하거나, 실행하지 않게 만들고 싶을 때 사용하는 구문
: 조건분기 : 조건을 기반으로 실행의 흐름을 변경하는 것

=====================================================================
if (불 값이 나오는 표현식):    -> if의 조건문 뒤에는 반드시 콜론(:)을 붙여줘야 한다.
OOOO불 값이 참일 경우, 실행할 문장
OOOO불 값이 참일 경우, 실행할 문장

OOOO : 들여쓰기 4칸
=====================================================================

>>> if True:
	print("True입니다...!")
	print("정말 True입니다...!")

	
True입니다...!
정말 True입니다...!

>>> if False:
	print("False입니다...!")

> 조건문의 기본 사용
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 양수 조건
if number > 0:
    print("양수입니다.")

# 음수 조건
if number < 0:
    print("음수입니다.")

# 0 조건
if number == 0:
    print("0입니다.")

정수 입력> 273
양수입니다.

정수 입력> -52
음수입니다.

정수 입력> 0
0입니다.
---------------------------------------------------------------------------

=====================================================================
※ 들여쓰기(indent) ※
"프로그래밍에서도 들여쓰기(indent)를 하나?"라는 질문을 갖게 된다.
: 일반적으로 파이썬 프로그래밍에서는 '띄어쓰기 4번'을 많이 사용한다!!!

> 파이썬에서는 소프트 탭(soft tab)이라 해서 자동으로 띄어쓰기 4개를 작성해준다.
- 들여쓰기 제거 시, "Shift + Tab"을 누른다!!!
=====================================================================

# 날짜/시간 활용하기
<Tip> : 코드를 한꺼번에 외우려 하기보다 어딘가에 적어둔 후, 필요할 때마다 복/붙을 진행한다.

> 날짜/시간 출력하기
---------------------------------------------------------------------------
# 날짜/시간과 관련된 기능을 가져온다.
import datetime

# 현재 날짜/시간을 구한다.
now = datetime.datetime.now()

# 출력합니다.
print(now.year, "년")
print(now.month, "월")
print(now.day, "일")
print(now.hour, "시")
print(now.minute, "분")
print(now.second, "초")

2020 년
1 월
18 일
13 시
53 분
58 초
---------------------------------------------------------------------------

> 7장에서 배울 '모듈'이라는 기능을 활용해서 datetime이라는 기능을 가져온다.(import)
- datetime.datetime.now() 함수로 현재의 시간을 구해 now라는 변수에 대입
- now.year, now.month, now.day, now.hour, now.minute, now.second

> 날짜/시간을 한 줄로 출력하기
---------------------------------------------------------------------------
# 날짜/시간과 관련된 기능을 가져온다.
import datetime

# 현재 날짜/시간을 구한다.
now = datetime.datetime.now()

# 출력한다.
print("{}년 {}월 {}일 {}시 {}분 {}초".format(
    now.year,
    now.month,
    now.day,
    now.hour,
    now.minute,
    now.second
))

2020년 1월 18일 13시 57분 24초
---------------------------------------------------------------------------

> 오전과 오후를 구분하는 프로그램
---------------------------------------------------------------------------
# 날짜/시간과 관련된 기능을 가져온다.
import datetime

# 현재 날짜/시간을 구한다.
now = datetime.datetime.now()

# 오전 구분
if now.hour < 12:
    print("현재 시각은 {}시로 오전입니다!".format(now.hour))

# 오후 구분
if now.hour > 12:
    print("현재 시각은 {}시로 오후입니다!".format(now.hour))
    
현재 시각은 14시로 오후입니다!
---------------------------------------------------------------------------

> 계절을 구분하는 프로그램
---------------------------------------------------------------------------
# 날짜/시간과 관련된 기능을 가져온다.
import datetime

# 현재 날짜/시간을 구한다.
now = datetime.datetime.now()

# 봄 구분
if 3 <= now.month <= 5:
    print("이번 달은 {}월로 봄입니다!".format(now.month))

# 여름 구분
if 6 <= now.month <= 8:
    print("이번 달은 {}월로 여름입니다!".format(now.month))

# 가을 구분
if 9 <= now.month <= 11:
    print("이번 달은 {}월로 가을입니다!".format(now.month))

# 겨울 구분
if now.month == 12 or 1 <= now.month <= 2:
    print("이번 달은 {}월로 봄입니다!".format(now.month))

: 겨울의 경우, 12월과 1~2우러이므로 or 연산자를 사용해 범위를 사용


이번 달은 1월로 봄입니다!
---------------------------------------------------------------------------

# 컴퓨터 조건
=====================================================================
if 불 값이 나오는 표현식:
OOOO불 값이 참일 때 실행할 문장
=====================================================================

> 끝자리로 짝수와 홀수 구분
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")

# 마지막 자리 숫자를 출력
last_character = number[-1]

# 숫자로 변환하기
last_number = int(last_character)

# 짝수 확인
if last_number == 0 \
   or last_number == 2 \
   or last_number == 4 \
   or last_number == 6 \
   or last_number == 8:
    print("짝수입니다.")

# 홀수 확인
if last_number == 1 \
   or last_number == 3 \
   or last_number == 5 \
   or last_number == 7 \
   or last_number == 9:
    print("홀수입니다.")

정수 입력> 52
짝수입니다.
정수 입력> 273
홀수입니다.
---------------------------------------------------------------------------

> in 문자열 연산자를 활용해서 짝수와 홀수 구분
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
last_character = number[-1]

# 짝수 조건
if last_character in "02468":
    print("짝수입니다.")

# 홀수 조건
if last_charater in "13579":
    print("홀수입니다.")

정수 입력> 2
짝수입니다.
정수 입력> 3
홀수입니다.
---------------------------------------------------------------------------    

나머지 연산자를 활용해서 짝수와 홀수 구분
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 짝수 조건
if number % 2 == 0:
    print("짝수입니다.")

# 홀수 조건
if number % 2 == 1:
    print("홀수입니다.")
	
정수 입력> 52
짝수입니다.	
---------------------------------------------------------------------------
    
※ 컴퓨터에서는 어떻게 프로그래밍을 하는 것이 효율적인지에 대해 고민해야한다.

=====================================================================
# 4가지 키워드로 정리하는 핵심 포인트
- 불(boolean) : 파이썬의 기본 자료형으로 True(참)와 False(거짓)을 나타내는 값
- 비교 연산자 : 숫자 또는 문자열에 적용하며, 대소를 비교하는 연산자
- 논리 연산자 : not, and, or 연산자가 있으며, 불을 만들 때 사용
- if 조건문 : 조건에 따라 코드를 실행하거나 실행하지 않게 만들고 싶을 때 사용하는 구문
=====================================================================

