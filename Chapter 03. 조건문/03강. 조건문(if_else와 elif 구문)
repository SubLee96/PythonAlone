PythonAlone

03. 조건문
: 불에 대해 이해한다.
: if 조건문의 기본적인 사용 방법을 알아본다.
: 현실의 조건과 프로그래밍에서의 조건에 차이를 이해한다.

> 'if-else 조건문' : if 조건문은 뒤에 else 구문을 붙여서 사용 가능하다.

---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 짝수 조건
if number % 2 == 0:
    print("짝수입니다.")

# 홀수 조건
if number % 2 == 1:
    print("홀수입니다.")

: 이런 식으로 작성하면 if문을 두 번이나 사용해야하기 때문에 문제가 발생한다.
---------------------------------------------------------------------------

# else 조건문의 활용
: else 구문 : if 조건문 뒤에 사용하며, if 조건문의 조건이 거짓일 때 실행되는 부부
=====================================================================
if 조건:
OOOO조건이 참일 때 실행할 문장
else:
OOOO조건이 거짓일 때 실행할 문장
=====================================================================

> if 조건문에 else 구문을 추가해서 짝수와 홀수 구분
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 조건문을 사용합니다.
if number % 2 == 0:
    # 조건이 참일 때, 즉 짝수 조건
    print("짝수입니다.")
else:
    # 조건이 거짓일 때, 즉 홀수 조건
    print("홀수입니다.")

정수 입력> 13
홀수입니다.
---------------------------------------------------------------------------

: 조건문이 오로지 두 가지만 구분될 때, "if else 구문"을 사용한다.

# elif 구문
: elif 구문 : 여러 가지 구문을 사용할 경우에 사용한다.

=====================================================================
if 조건A:
OOOO조건A가 참일 때 실행할 문장
elif 조건B:
OOOO조건B가 참일 때 실행할 문장
elif 조건C:
OOOO조건C가 참일 때 실행할 문장
...
else:
OOOO모든 조건이 거짓일 때 실행할 문장
=====================================================================

---------------------------------------------------------------------------
# 날짜/시간과 관련된 기능을 가져온다.
import datetime

# 현재 날짜/시간을 구하고
# 쉽게 사용할 수 있게 월을 변수에 저장한다.
now = datetime.datetime.now()
month = now.month

# 조건문으로 계절을 확인한다.
if 3 <= month <= 5:
    print("현재는 봄입니다.")
elif 6 <= month <= 8:
    print("현재는 여름입니다.")
elif 9 <= month <= 11:
    print("현재는 가을입니다.")
else:
    print("현재는 겨울입니다.")

현재는 겨울입니다.
---------------------------------------------------------------------------

※ '프로그래밍은 조건문으로 도배한다' 할 정도로 조건문을 많이 사용한다.

# if 조건문을 효율적으로 사용하기

> 구현할 조건
=====================================================================
조건			설명(학생 평가)
4.5			신
4.2 ~ 4.5	교수님의 사랑
3.5 ~ 4.2	현 체제의 수호자
2.8 ~ 3.5	일반인
2.3 ~ 2.8	일탈을 꿈꾸는 소시민
1.75 ~ 2.3	오락문화의 선구자
1.0 ~ 1.75	불가촉천민
0.5 ~ 1.0	자벌레
0 ~ 0.5		플랑크톤
0			시대를 앞서가는 혁명의 씨앗
=====================================================================

> 유머를 조건문으로 구현하기(1)
---------------------------------------------------------------------------
# 변수를 선언합니다.
score = float(input("학점 입력> "))

# 조건문을 적용합니다.
if score == 4.5:
    print("신")
elif 4.2 <= score < 4.5:
    print("교수님의 사랑")
elif 3.5 <= score < 4.2:
    print("현 체제의 수호자")
elif 2.8 <= score < 3.5:
    print("일반인")
elif 2.3 <= socre < 2.8:
    print("일탈을 꿈꾸는 소시민")
elif 1.75 <= score < 2.3:
    print("오락문화의 선구자")
elif 1.0 <= score < 1.75:
    print("불가촉천민")
elif 0.5 <= score < 1.0:
    print("자벌레")
elif 0 < score < 0.5:
    print("플랑크톤")
elif score == 0:
    print("시대를 앞서가는 혁명의 씨앗")
	
학점 입력> 3.5
현 체제의 수호자
---------------------------------------------------------------------------

> 유머를 조건문으로 구현하기(2)
---------------------------------------------------------------------------
# 변수를 선언합니다.
score = float(input("학점 입력> "))

# 조건문을 적용합니다.
if score == 4.5:
    print("신")
elif 4.2 <= score:
    print("교수님의 사랑")
elif 3.5 <= score:
    print("현 체제의 수호자")
elif 2.8 <= score:
    print("일반인")
elif 2.3 <= socre:
    print("일탈을 꿈꾸는 소시민")
elif 1.75 <= score:
    print("오락문화의 선구자")
elif 1.0 <= score:
    print("불가촉천민")
elif 0.5 <= score:
    print("자벌레")
elif 0 < scor5:
    print("플랑크톤")
else:
    print("시대를 앞서가는 혁명의 씨앗")

학점 입력> 3.5
현 체제의 수호자
---------------------------------------------------------------------------
: 이런 식으로 변경하면 조건 비교를 반밖에 하지 않고, 코드의 가독성도 좀 더 향상되기 때문이다.

# False로 변환되는 값
: if 조건문의 매개변수에 불이 아닌 다른 값이 올 경우에 자동으로 이를 불로 변환해서 처리한다.
> 어떤 값이 True이고 어떤 값이 False인지를 사전에 알고 있어야 파악 가능하다.
> False로 변환되는 값 : None, 숫자 0과 0.0, 빈 컨테이너(빈 문자열, 빈 바이트열, 빈 리스트, 빈 튜플, 빈 딕셔너리 등)

> False로 변환되는 값
---------------------------------------------------------------------------
print("# if 조건문에 0 넣기")
if 0:
    print("0은 True로 변환됩니다.")
else:
    print("0은 False로 변환됩니다.")
print()

print("# if 조건문에 빈 문자열 넣기")
if "":
    print("빈 문자열은 True로 변환됩니다.")
else:
    print("빈 문자열은 False로 변환됩니다.")

# if 조건문에 0 넣기
0은 False로 변환됩니다.

# if 조건문에 빈 문자열 넣기
빈 문자열은 False로 변환됩니다.
---------------------------------------------------------------------------

=====================================================================
# 뭔가 없는 것 같은 것은 False
: if 조건문에 비교 연산자가 없고 어떤 변수만 놓여 있을 때는 대부분 이러한 변환을 사용하는 것이다.
: 사용하지 말자고 주장하는 개발자도 있다. (이유: 사전 지식이 있어야 하기 때문이다.)
> '뭔가 없는 것 같은 것은 False'라 기억하자!!!
=====================================================================

# pass 키워드
: 프로그래밍의 전체 골격을 잡아 놓고 내부에서 처리할 내용은 차근차근 생까하며 만들겠다는 의도
=====================================================================
if zero == 0
	빈 줄 삽입
else:
	빈 줄 삽입
=====================================================================

> 나중에 구현하려고 비워 둔 구문
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 조건문 사용
if number > 0:
    # 양수일 때: 아직 미구현 상태입니다.
else:
    # 음수일 때: 아직 미구현 상태입니다.
---------------------------------------------------------------------------
: 위와 같이 작성한 경우에 IndentationError(들여쓰기가 잘못되어 있다)가 발생하게 된다.

> pass 키워드를 사용한 미구현 부분 입력
---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 조건문 사용
if number > 0:
    # 양수일 때: 아직 미구현 상태입니다.
    pass
else:
    # 음수일 때: 아직 미구현 상태입니다.
    pass
---------------------------------------------------------------------------

§ 좀 더 알아보기: raise NotimplementError
: pass를 입력했어도 잊어버리는 경우가 있다.
> raise와 NotimplementError를 조합해 raise NotimplementError를 사용하면
  '아직 구현하지 않은 부분이에요!'라는 오류를 강제로 발생시킬 수 있다.

---------------------------------------------------------------------------
# 입력을 받습니다.
number = input("정수 입력> ")
number = int(number)

# 조건문 사용
if number > 0:
    # 양수일 때: 아직 미구현 상태입니다.
    raise NotImplementedError
else:
    # 음수일 때: 아직 미구현 상태입니다.
    pass
    raise NotImplementedError

정수 입력> 1
Traceback (most recent call last):
  File "C:/Users/이윤섭/Desktop/python practice/3단원/3-2/raise_NotImplementedError.py", line 8, in <module>
    raise NotImplementedError
NotImplementedError
---------------------------------------------------------------------------
: "어제 이 부분을 구현하지 않았구나!"라는 사실을 알 수 있다.

=====================================================================
# 4가지 키워드로 정리하는 핵심 포인트
- else 구문 : if 조건문 뒤에 사용하며, if 조건문의 조건이 거짓일 때 사용
- elif 구문 : if 조건문과 else 구문 사이에 입력하며, 세 개 이상의 조건을 연결해서 사용할 때 적절
- False로 변환되는 값 : None, 0, 0.0, 빈문자열, 빈 바이트열, 빈 리스트, 빈 튜플, 빈 딕셔너리
                   등을 만들 경우에 사용
- pass 키워드 : 프로그래밍의 전체 골격을 잡아놓고, 내부에 처리할 내용은 나중에 만들고자 할 경우
=====================================================================

