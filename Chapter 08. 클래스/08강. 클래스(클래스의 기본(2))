PythonAlone

08. 클래스

: 객체 지향 프로그래밍에 대해서 이해한다.
: 클래스, 인스턴스를 구분한다.
: 클래스 만드는 방법을 이해한다.

08-1 클래스의 기본
> 처음 보고 이해하기 어렵다.

# 클래스 선언하기

[ class 클래스 이름:
	클래스 내용		]

[  인스턴스 이름(변수 이름) = 클래스 이름()  ] 

> 인스턴스 : 클래스를 기반으로 만들어진 객체
> 클래스 : 클래스 이름과 같은 함수(생성자)를 사용해서 객체를 만든다.

---------------------------------------------------------------------------
# 클래스를 선언한다.
class Student:
	pass
	
# 학생을 선언한다.
student = Student()

# 학생 리스트를 선언한다.
students = [
	Student(),
	Student(),
	Student(),
	Student(),
	Student(),
	Student(),
 ]
---------------------------------------------------------------------------

# 생성자
: 클래스 이름과 같은 함수

[  class 클래스 이름:
	def __init__(self, 추가적인 매개변수):
		pass
										]

=====================================================================
# self
: self는 단순한 식별자로써 변수 이름으로 활용해도 된다.
(그러나 거의 모든 파이썬 개발자는 self라는 이름을 사용하고 있으므로 기본 규칙을 지키자!)
=====================================================================

---------------------------------------------------------------------------
# 클래스를 선언한다.
class Student:
	def __init__(self, name, korean, math, english, science):
		self.name = name
		self.korean = korean
		self.math = math
		self.english = english
		self.science = science
		
# 학생 리스트를 선언한다.
students = [
	Student("윤인성", 87, 98, 88, 95),
	Student("연하진", 92, 98, 96, 98),
	Student("구지연", 76, 96, 94, 90),
	Student("나선주", 98, 92, 96, 92),
	Student("윤아린", 95, 98, 98, 98),
	Student("윤명월", 64, 88, 92, 92)
]

# Student 인스턴스의 속성에 접근하는 방법
students[0].name
students[0].korean
students[0].math
students[0].english
students[0].science

---------------------------------------------------------------------------

> 소멸자(destructor) : 생성자와 반대로 인스턴스가 소멸될 때 호출되는 함수

# 메서드
: 클래스가 가지고 있는 함수

[  class 클래스 이름:
		def 메소드 이름(self, 추가적인 매개변수):
			pass	
											]
> 클래스 내부에 함수(메서드) 선언하기											
---------------------------------------------------------------------------
# 클래스를 선언한다.
class Student:
    def __init__(self, name, korean, math, english, science):
        self.name = name
        self.korean = korean
        self.math = math
        self.english = english
        self.science = science
        
    def get_sum(self):
        return self.korean + self.math +\
               self.english + self.science

    def get_average(self):
        return self.get_sum() / 4

    def to_string(self):
        return "{}\t{}\t{}".format(\
            self.name,\
            self.get_sum(),\
            self.get_average())
    
# 학생 리스트를 선언한다.
students = [
    Student("윤인성", 87, 98, 88, 95),
    Student("연하진", 92, 98, 96, 98),
    Student("구지연", 76, 96, 94, 90),
    Student("나선주", 98, 92, 96, 92),
    Student("윤아린", 95, 98, 98, 98),
    Student("윤명월", 64, 88, 92, 92)
]

# 학생을 한 명씩 반복한다.
print("이름", "총점", "평균", sep="\t")
for student in students:
    # 출력한다.
    print(student.to_string())

이름	총점	평균
윤인성	368	92.0
연하진	384	96.0
구지연	356	89.0
나선주	378	94.5
윤아린	389	97.25
윤명월	336	84.0
---------------------------------------------------------------------------

=====================================================================
# 7가지 키워드로 정리하는 핵심 포인트
- 객체(object) : 속성을 가질 수 있는 모든 것
- 객체 지향 프로그래밍 언어(Object Oriented Programming Language)
: 객체를 기반으로 프로그램을 만드는 프로그래밍 언어
- 추상화(abstraction) : 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념 또는 기능을
					   간추려 내는 것
- 클래스(class) : 객체를 쉽고 편리하게 생성하기 위해 만들어진 구문
- 인스턴스(instance) : 클래스를 기반으로 생성한 객체를 의미
- 생성자(constructor) : 클래스 이름과 같은 인스턴스를 생성할 때 만드는 함수
- 메서드(method) : 클래스다 가진 함수
=====================================================================

