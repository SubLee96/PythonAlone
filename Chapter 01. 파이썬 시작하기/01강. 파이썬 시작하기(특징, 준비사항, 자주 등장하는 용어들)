PythonAlone

01. 파이썬 시작하기
: 기본적인 단어를 알고, 문법을 통해 단어를 조합하는 방법을 배우면 된다.

01-1 파이썬을 하기 전에 읽는 아주 간단한 설명

# 컴퓨터 프로그램
= 컴퓨터 프로그램이란 '컴퓨터가 무엇을 해야 할지 미리 작성한 진행 계획'
= 이진코드(binary code) : 이진 숫자로 이루어진 코드
= 프로그래밍 언어 : 사람이 이해하기 쉬운 언어로 프로그램을 만들자는 생각으로 만들어진 언어로
= 소스 코드(source code) : 프로그래밍 언어로 작성한 프로그램

# 프로그래밍 언어, 파이썬
= 파이썬 : 1991년 귀도 반 로섬이 발표한 프로그래밍 언어
	     영국의 6인조 코미디 그룹 '몬티 파이썬'에서 시작했다. / 비단뱀을 모티브로 만들어졌다.
		 
# 파이썬이 인기 있는 이유
= 장점
1. 문법이 간단해서 배우기 쉽다.
: 비전공자들도 쉽게 배울 수 있는 언어이다.
(C언어 등은 전공자들도 쉽게 이해하지 못하는 경우가 다반사이다.)
2. 많은 사람이 사용하고 있어서 굉장히 다양한 분야에서 활용할 수 있다.
: 많은 사람이 다양한 분야에서 활용하고 있다.
(웹 서버, 해킹 도구, IoT, 인공지능 등에 모두 활용할 수 있다.)
3. 대부분의 운영체제(윈도우, 맥, 리눅스)에서 같은 방법으로 사용할 수 있다.
: 대부분의 프로그래밍 언어는 운영체제가 제한적이지만, 다른 언어는 운영테제에서 사용 방법이 살짝 다르다.
(파이썬은 모든 운영체제에서 같은 방법으로 사용할 수 있다.)

= 단점
1. 느리다.
: 대부분의 언어들은 '쉽게 사용할 수 있다.'라는 부분과 '빠르다'라는 성질이 반비례한다.
(C언어는 어려운 대신 빠르다.)
(통상적으로 거대한 프로젝트나 게임을 만들 경우에는 C, C++, C#을 사용한다.)
> 그러나, 최근에는 컴퓨터 성능이 좋아져서 게임 등과 같이 연산이 많이 필요한 프로그램이 아니라면 프로그래밍 언어의
  속도 차이를 크게 느낄 수 없다.
  
예) 기계 학습, 딥러닝 등의 고정적인 연산을 많이 사용하는 프로그램들은 큰 틀을 파이썬으로 만들고
    고정적인 연산 부분만 C언어로 활용하기도 한다.


01-2 파이썬을 배우기 위해 준비해야 할 것들
= 개발 환경 : 프로그래밍을 배우기 위해서도 마찬가지로 프로그래밍을 할 수 있는 환경
= 텍스트 에디터 : 프로그래밍 언어로 이루어진 코드를 작성(입력)할 수 있는 도구
= 코드 실행기 : 코드를 실행할 수 있는 도구

파이썬 : 텍스트 에디터 > 텍스트 에디터
	 : 코드 실행기 > 파이썬 인터프리터

프롬프트(prompt)에서 >>>에 코드를 한 줄 한 줄 입력하게 된다.
= 인터렉티브 셸 : 컴퓨터와 상호 작용하는 공간
= 대화형 셸 : 한 마디씩 주고받는 것처럼 대화하는 것들
>>> 10 + 10
20
>>> "Hello" * 3
'HelloHelloHello'
>>> #종료시에 창 닫기 버튼을 누르면 된다.

# 텍스트 에디터 사용하기(1): IDLE
= 혼자 간단하게 개발한다면 파이썬 IDLE 에디터를 사용해도 괜찮다!
 (일반적인 협업에서는 잘 사용하지 않는다.)

# 텍스트 에디터 사용하기(2): 비주얼 스튜디오 코드
= 사용하기 나쁘지 않다!


01-3 이 책에서 자주 나오는 파이썬 용어들
# 표현식과 문장
= 표현식(expression) : 어떠한 값을 만들어 내는 간단한 코드 (숫자, 수식, 문자열 등)
: 문장이 모여서 프로그램이 된다.
print("Python Programming")

= 키워드(keyword) : 특별한 의미가 부여된 단어로, 파이썬이 만들어질 때 이미 사용하겠다고 예약해 놓은 것
※ 사용자가 키워드인지 아닌지를 구분해야 하는 이유 : 프로그래밍 언어에서 사용자가 이름을 정할 때 키워드를 사용하면 안 된다!

ex)
False	None	True		and		as		assert
break	class	contine		def		del		elif
else	except	finally		for		from	global
if		import	in			is		lambda	nonlocal
not		or		pass		raise	return	try
while	with	yield

> True는 키워드이지만, true는 키워드가 아니다.
(공부하다보면 알게 되기에 걱정할 필요 없다.)

---------------------------------------------------------------------------
>>> import keyword
>>> print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break'
, 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally'
, 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal'
, 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
---------------------------------------------------------------------------

# 식별자
= 식별자(identifier) : 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어 (주로 변수 또는 함수 이름 등으로 사용)
========================================================
식별자의 기본 규칙들
1. 키워드를 사용하면 안 된다.
2. 특수 문자는 언더 바(_)만 허용된다.
3. 숫자로 시작하면 안 된다.
4. 공백을 포함할 수 없다.
========================================================

사용 가능한 단어		사용 불가능한 단어
alpha				break : 키워드
alpha10				
_alpha				273 alpha : 숫자로 시작
Alpha				
ALPHA				has space : 공백 포함

> 전 세계 모든 언어로 사용할 수 있지만, 알파벳을 사용하는 것이 관례이다.
> 의미없는 a, b 등의 단어보다 output 처럼 의미를 내포한 단어를 사용하는 것이 좋다.

= 스네이크 케이스와 캐멀 케이스
1. 단어 사이에 언더 바(_) 기호를 붙여 식별자를 만든다.
예) itemlist > item_list		: 스네이크 케이스(snake_case)

2. 단어들의 첫 글자를 대문자로 만들어 식별자를 만든다.
예) itemlist > ItemList		: 캐멀 케이스(CamelCase)

> 공백이 없어 재빠르게 이해할 수 없다는 점을 이용한다.

= 식별자 구분하기
: 캐멀 케이스의 유형 2가지
1. PrintHello	> 파이썬에서 사용한다.(첫 번째 글자 대문자)
2. printHello	> 파이썬에서 사용하지 않는다.(첫 번째 글자 소문자)

> 파이썬에서 첫 번째 글자가 소문자면 무조건 '스네이크 케이스'이다.

캐멀 케이스로 작성되어 있으면 "클래스"
스네이크 케이스로 작성되어 있으면 "함수(뒤에 괄호 포함)", "변수(뒤에 괄호 미포함)"

# 주석
: 주석(comment) : 프로그램의 진행에 전혀 영향을 주지 않는 코드로, 프로그램을 설명하기 위해서 사용한다.
"#"을 사용한다.

>>> # 간단히 출력하는 예입니다.
>>> print("Hello! Python Programming...")    # 문자열을 출력합니다.
Hello! Python Programming...

# 연산자와 자료
: 연산자 : 스스로 값이 되는 것은 아니고 값과 값 사이에 무언가 기능을 적용할 때 사용하는 것들
>>> 1 + 1
2
>>> 10 - 10
0

: 리터럴(literal) : 자료를 리터럴이라고 칭한다. / 자료란 숫자, 문자 '값' 자체를 의미한다.

# 출력: print()
[  print(출력1, 출력2)...  ]

= 하나만 출력하기 
: print 명령어 뒤의 괄호 안에 출력하고 싶은 내용이 하나인 경우
>>> print("Hello Python Programmin...!")
Hello Python Programmin...!
>>> print(52)
52
>>> print(273)
273

= 여러 개 출력하기
: print 명령어 뒤에 출력하고 싶은 내용을 쉼표로 연결해서 여러 개 작성
>>> print(52, 273, "Hello")
52 273 Hello
>>> print("안녕하세요", "저의", "이름은", "이윤섭입니다!")
안녕하세요 저의 이름은 이윤섭입니다!

= 줄바꿈하기
: print 명령어의 괄호 안에 아무것도 입력하지 않은 경우 아무것도 입력되지 않고 줄이 바뀐다.
>>> print()

>>> 
---------------------------------------------------------------------------
# 하나만 출력합니다.
print("# 하나만 출력합니다.")
print("Hello Python Programming...!")
print()

# 여러 개를 출력합니다.
print("# 여러 개를 출력합니다.")
print(52, 273, "Hello")
print("안녕하세요", "저의", "이름은", "이윤섭입니다!")
print()


# 아무것도 입력하지 않으면 단순하게 줄바꿈합니다.
print("# 아무것도 출력하지 않습니다.")
print("--- 확인 전용선 ---")
print()
print()
print("--- 확인 전용선 ---")

# 하나만 출력합니다.
Hello Python Programming...!

# 여러 개를 출력합니다.
52 273 Hello
안녕하세요 저의 이름은 이윤섭입니다!

# 아무것도 출력하지 않습니다.
--- 확인 전용선 ---


--- 확인 전용선 ---
---------------------------------------------------------------------------

